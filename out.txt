D:\devhub-production\heroku\uva-onexys\.eslintrc.js
module.exports = {
    "extends": "google"
};
======================
D:\devhub-production\heroku\uva-onexys\app.js
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').load();
}

var express = require('express');
var path = require('path');
var config = require('./bin/config');
var logger = require('morgan');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('client-sessions');

var config = require('./bin/config');
var auth = require('./bin/auth')

var index = require('./routes/index');
var home = require('./routes/home');
var modules = require('./routes/modules');
var badges = require('./routes/badges');
var admin = require('./routes/admin')
var app = express();

var launch = require('./routes/canvasLaunch')

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
//app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.set('trust proxy', true);

app.use(cookieParser(config.client_secret));

app.use(session({
  cookieName: 'session',
  secret: config.client_secret,
  duration: 24 * 60 * 60 * 1000,
  activeDuration: 1000 * 60 * 5,
  cookie: {
    path: '/',
    ephemeral: false,
    httpOnly: true,
    secure: false
  }
}));

app.get('/callback',auth.oath2_callback);

app.get('/',index);
app.use('/home',[auth.updateCookies,auth.checkUser],home)
app.use('/badges',[auth.updateCookies,auth.checkUser],badges)
app.use('/admin',[auth.updateCookies,auth.checkAdmin],admin)

app.use('/modules',auth.updateCookies,modules)

app.use('/launch',launch)

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;

======================
D:\devhub-production\heroku\uva-onexys\app.json
{
    "name": "ONEXYS Canvas Application",
    "description": "An external tool for the ONEXYS program on the Canvas LMS",
    "repository": "https://github.com/suryadutta/ONEXYSappcom/",
    "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Yale_University_logo.svg/2000px-Yale_University_logo.svg.png",
    "keywords": ["ONEXYS", "LTI", "LMS","Yale","Node.JS"],
    "addons": [
        {
          "plan": "heroku-redis:hobby-dev"
        }
      ],
    "env":{
        "HEROKU_APP_NAME": {
            "required": true,
            "description": "Enter your application name here"
          },
        "CANVAS_URL":{
            "description": "The base URL for your deployment of Canvas",
            "value": "https://yale.instructure.com/"
        },
        "CANVAS_KEY":{
            "description": "A secret key to use when linking this app to your course (from school)."
        },
        "DEVELOPER_TOKEN":{
            "description": "A secret password to use when linking this app to your course (from school)."
        },
        "CANVAS_ADMIN_AUTH_TOKEN":{
            "description": "A generated Authentication token for a user with admin priviledges to the course."
        },
        "CANVAS_PAGE_RESULTS":{
            "description": "Default number of results to return from Canvas API. Needs to be larger than # of students in course",
            "value": "100"
        },
        "MONGO_USERNAME":{
            "description": "Username for all Mongo connections"
        },
        "MONGO_PASSWORD":{
            "description": "Password for all Mongo connections"
        }
    }
}
======================
D:\devhub-production\heroku\uva-onexys\bin\auth.js
var express = require('express');
var config = require('./config');
var request = require('request');
var Queue = require('better-queue');

var lti = require ('ims-lti');
var RedisNonceStore = require('../node_modules/ims-lti/lib/redis-nonce-store.js');
var redis = require("redis"),
    redis_client = redis.createClient(config.redisURL);

var store = new RedisNonceStore(config.client_id, redis_client);

if (!provider) {
  var provider = new lti.Provider(config.client_id, config.client_secret);
  console.log('Generating new provider...')
}

// Set the configuration settings
let credentials = {
  client: {
    id: config.client_id,
    secret: config.client_secret,
  },
  auth: {
    tokenHost: config.canvasURL,
    tokenPath: 'login/oauth2/token',
    authorizePath: 'login/oauth2/auth',
  },
};

let oauth2 = require('simple-oauth2').create(credentials);

//queue to callback Auth Token (prevents multiple calls)
var authTokenQueue = new Queue(function(user_id,callback){
  console.log('Redis Key');
  console.log('token_'+String(user_id));
  redis_client.get('token_'+String(user_id), async function(err, token_string) {
    if (err){
      console.log(err);
      callback(false);
    } else {
      token_obj = JSON.parse(token_string);
      let accessToken = await oauth2.accessToken.create(token_obj.token);
      // Check if the token is expired. If expired it is refreshed.
      if (accessToken.expired()) {
        try {
          // save refresh token to add later
          let refresh_token = accessToken.token.refresh_token;
          // get new access token from Canvas API
          accessToken = await accessToken.refresh(credentials.client);
          // add back the previous refresh token to use again
          accessToken.token.refresh_token = refresh_token;
          // save new access token to Redis store
          redis_client.set('token_'+String(user_id), JSON.stringify(accessToken));
          callback(accessToken.token.access_token)
        } catch (error) {
          console.log('Error refreshing access token: ', error.message);
          callback(false);
        }
      } else {
        callback(accessToken.token.access_token);
      }
    }
  });
});

//middleware to check if admin
var checkAdmin = function(req,res,next) {
    if (typeof req.session.admin == 'undefined' && !req.session.admin) {
      console.log('Err authenticating admin');
      res.send('Err authenticating admin');
    } else {
      next()
    }
}

//middleware to update course information
var updateCookies = function(req,res,next){

  if (typeof(req.body.custom_canvas_course_id)=='string' && req.query.login_success != 1){
    console.log('Assigning Cookies');
    req.session.course_id = req.body.custom_canvas_course_id;
    req.session.course_title = req.body.context_title;
    req.session.user_id = req.body.custom_canvas_user_id;
    req.session.admin = req.body.roles.includes('Instructor');
    next();
  } else if (typeof(req.session.course_id)!='string'){
    console.log('ERROR: COOKIES NOT SET');
    res.status(500).render('cookieError');
  } else {
    next();
  }
};

//middleware to check user and launch lti
var checkUser = function(req, res, next) { 

  if (typeof(req.session.course_id)!='string'){
    console.log('ERROR: COOKIES NOT SET');
    res.status(500).render('cookieError');;
  } else {
    console.log('Session Test: Course-ID');
    console.log(req.session.course_id);
    req.connection.encrypted = true;
    if (req.query.login_success=='1'){
      next();
    } else {      
      provider.valid_request(req, function(err, is_valid) {
        if (!is_valid) {
          console.log('Unverified User:');
          console.log(provider.valid_request);
          console.log(provider);
          res.send('Unverified User');
        } else {         
          //check if auth token already exists in Redis 
          console.log('Redis Key (Check User)');
          console.log('token_'+String(req.session.user_id));
          redis_client.exists('token_'+String(req.session.user_id), function(err, token_exists) {
            if (token_exists==0){
              // generate auth token
              let authorizationUri = oauth2.authorizationCode.authorizeURL({
                redirect_uri: config.redirectURL,
                state: String(req.session.user_id),
              });
              res.redirect(authorizationUri);
            } else {
              // auth token exists
              next();
            }
          });
        }
      });
    }
  }
}

//path for oauth2 callback from Canvas server
var oath2_callback = async function(req, res, next){

  console.log('Query');
  console.log(req.query);

  let code = req.query.code;
  let options = {
    code,
  };
  try {
    // create new access token from Canvas API
    let result = await oauth2.authorizationCode.getToken(options);
    let accessToken = await oauth2.accessToken.create(result);
    console.log(accessToken);
    // save access token to Redis
    redis_client.set('token_'+req.query.state, JSON.stringify(accessToken));
    return res.redirect('/home?login_success=1')
  } catch(error) {
    console.error('Access Token Error', error.message);
    return res.status(500).json('Authentication failed');
  }
}

module.exports = {
    oath2_callback,
    updateCookies,
    authTokenQueue,
    checkUser,
    checkAdmin
};

======================
D:\devhub-production\heroku\uva-onexys\bin\config.js
var config = {};

config.port = process.env.PORT || '3000';
config.host = process.env.HOST || 'localhost';

config.canvasURL = process.env.CANVAS_URL;
config.client_id = process.env.CANVAS_KEY;
config.client_secret = process.env.DEVELOPER_TOKEN;
config.redirectURL = process.env.REDIRECT_URL;

config.canvasAdminAuthToken= process.env.CANVAS_ADMIN_AUTH_TOKEN;
config.canvasPageResults = process.env.CANVAS_PAGE_RESULTS || "200";

config.redisURL = process.env.REDIS_URL || '';

config.mongo_username = process.env.MONGO_USERNAME || 'localhost',
config.mongo_password = process.env.MONGO_PASSWORD || '',
config.local_mongo_database = 'mongodb://localhost:27017/oneyxs_dev'

config.disableLeaderboard = process.env.DISABLE_LEADERBOARD.toLowerCase() == 'true' ? true : false || false;

//configure MongoDB urls here - course ID to mongoDB URL
config.mongoURL = 'mongodb://'+config.mongo_username+':'+config.mongo_password+'@conexcluster-shard-00-00-bgeoe.mongodb.net:27017,conexcluster-shard-00-01-bgeoe.mongodb.net:27017,conexcluster-shard-00-02-bgeoe.mongodb.net:27017/test?ssl=true&replicaSet=ConexCluster-shard-0&authSource=admin&retryWrites=true';

//add to list if we create new courses
//format is courseID: databaseName
config.mongoDBs = {
  '2517': 'conex',
}

//the name of the mongo db to connect to
config.mongo_db_name = process.env.MONGO_DB_NAME

config.cookieduration = 1000 * 60 * 60 * 24;

module.exports = config;

======================
D:\devhub-production\heroku\uva-onexys\bin\cron.js
#!/usr/bin/env node
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').load('../');
}

var asyncStuff = require('async');
var config = require('./config');
var mongo = require('../models/mongo');
var canvas = require('../models/canvas');

var assignment_url = (courseID) => {
  return config.canvasURL + 'api/v1/courses/' + courseID + '/students/submissions?student_ids[]=all&grouped=true&per_page=100'
};

var get_update_url = (courseID, callback) => {    
  getAdminRequest(notes_column_url(courseID),function(err,custom_columns){
    var points_id = custom_columns.find(column => column.title='Notes').id;
    var update_url = config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/' + points_id + '/data/';
    callback(update_url);
  });
}

function computeScoreAndBadges(courseID, studentID, data, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += badge_info.Points;
      badges[badges.indexOf(badge_info)].Awarded = true;
    }
    
    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    try {
      //Daily Yalie questions
      for (var i = 0; i < mongo_data.dailies.length; i++) {
        var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
        if (daily_object){
          var daily_grade = parseFloat(daily_object.grade);
          if (daily_grade == parseFloat(100)) {
            daily_done += 1
          }
        }
      }
      totalPoints += (daily_done * 50); //assign points for each daily
      //assign points for each badge earned
      if (daily_done >= 1) {
        awardBadge(1);
      }
      if (daily_done >= 5) {
        awardBadge(2);
      }
      if (daily_done >= 10) {
        awardBadge(3);
      }
      if (daily_done >= 15) {
        awardBadge(4);
      }
      if (daily_done >= 20) {
        awardBadge(5);
      }
      if (daily_done >= 25) {
        awardBadge(6);
      }

      for (var i = 0; i < mongo_data.modules.length; i++) {
        if (mongo_data.modules[i].open=='true'){
                  
          //practice objectives proficient
          var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
          if (practice_object){
            var practice_grade = parseFloat(practice_object.grade);
            if (practice_grade > parseFloat(mongo_data.modules[i].practice_cutoff)) {

              practice_proficient += 1;

              //Process Practice Leaderboard

              if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                //user is already on leaderboard
                awardBadge(20);
                user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                  'student_id': studentID.toString(),
                  'score': practice_grade
                }
                mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                  //user is top on leaderboard
                  awardBadge(21);
                }

              } else {
                // Process leaderboard if not full - add user automatically
                if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                  mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  });
                  awardBadge(20);
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }
                } else {
                  //user not on full leaderboard - compare scores and update
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  }
                }
              }
            }
          }

          //quizzes attempted
          var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
          if (quiz_object){
            var quiz_grade = parseFloat(quiz_object.grade);
            if (quiz_grade > parseFloat(0)) {
              quizzes_attempted += 1;

              //Process Quiz Leaderboard

              if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                //user is already on leaderboard
                awardBadge(22);
                user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                  'student_id': studentID.toString(),
                  'score': quiz_grade
                }
                mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                  //user is top on leaderboard
                  awardBadge(23);
                }

              } else {
                // Process leaderboard if not full - add user automatically
                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                  mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  });
                  awardBadge(22);
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }
                } else {
                  //user not on full leaderboard - compare scores and update
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  }
                }
              }
            }
          }

          //number of reflections
          var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
          if(reflection_object){
            var reflection_grade = parseFloat(reflection_object.grade);
            if (reflection_grade == parseFloat(100)) {
              reflections_done += 1;
            }
          }
          mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
        } 
      }


      totalPoints += (practice_proficient * 100); //assign points for each proficient ALEKS 
      //assign points for each badge earned
      if (practice_proficient >= 1) {
        awardBadge(7);
      }
      if (practice_proficient >= 3) {
        awardBadge(8);
      }
      if (practice_proficient >= 7) {
        awardBadge(9);
      }
      if (practice_proficient >= 10) {
        awardBadge(10);
      }

      
      totalPoints += (quizzes_attempted * 100); //assign points for each quiz
      //assign points for each badge earned
      if (quizzes_attempted >= 1) {
        awardBadge(11);
      }
      if (quizzes_attempted >= 3) {
        awardBadge(12);
      }
      if (quizzes_attempted >= 7) {
        awardBadge(13);
      }
      if (quizzes_attempted >= 10) {
        awardBadge(14);
      }

      totalPoints += (reflections_done * 100);
      //assign points for each badge earned
      if (reflections_done >= 1) {
        awardBadge(28);
      }
      if (reflections_done >= 3) {
        awardBadge(29);
      }
      if (reflections_done >= 7) {
        awardBadge(30);
      }
      if (reflections_done >= 10) {
        awardBadge(31);
      }

      callback(null, totalPoints, badges); 
      console.log('Done with Student '+studentID.toString());
   
    } catch (err) {
      console.log(err);
      callback(err, 0, badges)
    }
  });
}

var updateAllStudentData = function(courseID, callback){
  console.log('Working on Course '+String(courseID));
  canvas.getAdminRequest(assignment_url(courseID), function(err, users) {
    console.log('Updating '+String(users.length)+' Students..');
    for (let i = 0; i < users.length; i++) {
      setTimeout(function () {
        computeScoreAndBadges(courseID, users[i].user_id, users[i].submissions, function(err, totalPoints, badges) {
          get_update_url(courseID, function(update_url){
            update_url = update_url + '/' + studentID;
            putAdminRequest(update_url, {
              column_data: {
                content: totalPoints.toString()
              }
            }, function(err, body) {
              if (err){
                console.log(err);
              }
              callback(null, totalPoints, badges);
            });
          });
        });
      }, i * 1000);
    }
    callback('Done');
  });
}

var courses_array = [38080,38081,38082,38083]

asyncStuff.series([
  function(callback) {
    updateAllStudentData(courses_array[0],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[1],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[2],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[3],callback)
  },
],
// optional callback
function(err, results) {
  console.log('All Done!');
});

======================
D:\devhub-production\heroku\uva-onexys\bin\redis.js
var config = require('./config');
var client = require('redis').createClient(config.redisURL);  
module.exports = {
    client,
}
======================
D:\devhub-production\heroku\uva-onexys\bin\www
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('onexys-jade:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

======================
D:\devhub-production\heroku\uva-onexys\models\canvas.js
var config = require('../bin/config');
var auth = require('../bin/auth');
var request = require('request');
var asyncStuff = require('async');
var mongo = require('./mongo');

var add_page_number = (url) => {
  if(url.indexOf("?")>-1){
    return url+'&per_page='+String(config.canvasPageResults);
  } else{
    return url+'?per_page='+String(config.canvasPageResults);
  }
}

var assignment_user_url = (studentID, courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/students/submissions?student_ids[]=' + studentID
}

var notes_column_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/';
}

var get_update_url = (courseID, callback) => {
  getAdminRequest(notes_column_url(courseID),function(err,custom_columns){
    var points_id = custom_columns.find(column => column.title='Notes').id;
    var update_url = config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/' + points_id + '/data';
    callback(update_url);
  });
}

var sections_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/sections?include=students';
}

var student_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/users?enrollment_type=student';
}

var daily_yalie_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/'+ courseID+ '/assignments?search_term=Daily';
}

function getRequest(url, userID, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.get({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user GET request

function postRequest(url, userID, parameters, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.post({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
      form: parameters,
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user POST request

function putRequest(url, userID, parameters, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.put({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
      form: parameters,
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user PUT request

function getAdminRequest(url, callback) {
  url = add_page_number(url);
  request.get({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin GET request

function postAdminRequest(url, parameters, callback) {
  url = add_page_number(url);
  request.post({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
    form: parameters,
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin POST request

function putAdminRequest(url, parameters, callback) {
  url = add_page_number(url);
  request.put({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
    form: parameters,
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin PUT request

function computeScoreAndBadges(studentID, courseID, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    //lucky bulldog
    lucky_bulldog_points = 100;
    var d = new Date();

    if (mongo_data.lucky_bulldogs.length>0){
      for (lucky_bulldog of mongo_data.lucky_bulldogs){
        console.log(lucky_bulldog);
        //student already was awarded lucky bulldog
        if(lucky_bulldog.awarded_ids.length>0){
          if (lucky_bulldog.awarded_ids.includes(studentID)){
            totalPoints += parseInt(lucky_bulldog_points);
          }
          else if (((d.getTime() - Date.parse(lucky_bulldog.time))/(1000*60))<1){
            totalPoints += parseInt(lucky_bulldog_points);
            lucky_bulldog.awarded_ids.push(studentID);
            mongo.updateData(courseID,'lucky_bulldogs',{ _id: parseInt(lucky_bulldog._id) },{awarded_ids: lucky_bulldog.awarded_ids}, function(err,result){});
          }
        } else if (((d.getTime() - Date.parse(lucky_bulldog.time))/(1000*60))<1){
          totalPoints += parseInt(lucky_bulldog_points);
          lucky_bulldog.awarded_ids.push(studentID);
          mongo.updateData(courseID,'lucky_bulldogs',{ _id: parseInt(lucky_bulldog._id) },{awarded_ids: lucky_bulldog.awarded_ids}, function(err,result){});
        }
      }
    }

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += parseInt(badge_info.Points);
      badges[badges.indexOf(badge_info)].Awarded = true;
    }

    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    getRequest(assignment_user_url(studentID, courseID),studentID, function(err, data) {
      if (err){
        console.log(err);
        callback(err, 0, badges);
      } else if (data.status == "unauthorized"){
        console.log('User unauthorized');
        callback('User unauthorized', 0, badges);
      } else if (data.error){
        console.log(data.error);
        callback(data.error, 0, badges);
      } else if (data.length<1) {
        console.log('No Assignment Data Recorded');
        callback(null, 0, badges);
      } else {
        //Daily Yalie questions
        for (var i = 0; i < mongo_data.dailies.length; i++) {
          var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
          if (daily_object){
            var daily_grade = parseFloat(daily_object.grade);
            if (daily_grade == parseFloat(100)) {
              daily_done += 1
            }
          }
        }
        totalPoints += (parseInt(daily_done) * 50); //assign points for each daily
        //assign points for each badge earned
        if (daily_done >= 1) {
          awardBadge(1);
        }
        if (daily_done >= 5) {
          awardBadge(2);
        }
        if (daily_done >= 10) {
          awardBadge(3);
        }
        if (daily_done >= 15) {
          awardBadge(4);
        }
        if (daily_done >= 20) {
          awardBadge(5);
        }
        if (daily_done >= 25) {
          awardBadge(6);
        }

        for (var i = 0; i < mongo_data.modules.length; i++) {
          if (mongo_data.modules[i].open=='true'){

            //practice objectives proficient
            var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
            if (practice_object){
              var practice_grade = parseFloat(practice_object.grade);
              if (practice_grade >= parseFloat(mongo_data.modules[i].practice_cutoff)) {

                practice_proficient += 1;

                //Process Practice Early Bird Badge
                if(mongo_data.modules[i].leaderboard.practice_early_bird == ""){
                  mongo_data.modules[i].leaderboard.practice_early_bird = studentID.toString();
                  awardBadge(26);
                  } else {
                  if (mongo_data.modules[i].leaderboard.practice_early_bird == studentID.toString()){
                    awardBadge(26);
                  }
                }

                //Process Practice Leaderboard

                if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(20);
                  user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  }
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': practice_grade
                      });
                      awardBadge(20);
                      mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(21);
                      }
                    }
                  }
                }
              }
            }

            //quizzes attempted
            var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
            if (quiz_object){
              var quiz_grade = parseFloat(quiz_object.grade);
              if (quiz_grade > parseFloat(0)) {
                quizzes_attempted += 1;

                //Process Quiz Early Bird Badge
                if(mongo_data.modules[i].leaderboard.quiz_early_bird == ""){
                  mongo_data.modules[i].leaderboard.quiz_early_bird = studentID.toString();
                  awardBadge(24);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.quiz_early_bird == studentID.toString()){
                    awardBadge(24);
                  }
                }

                //Process Quiz Leaderboard

                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(22);
                  user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  }
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': quiz_grade
                      });
                      awardBadge(22);
                      mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(23);
                      }
                    }
                  }
                }
              }
            }

            //number of reflections
            var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
            if(reflection_object){
              var reflection_grade = parseFloat(reflection_object.grade);
              if (reflection_grade == parseFloat(100)) {
                reflections_done += 1;

                //Process Reflection Early Bird Badge
                if(mongo_data.modules[i].leaderboard.reflection_early_bird == ""){
                  mongo_data.modules[i].leaderboard.reflection_early_bird = studentID.toString();
                  awardBadge(25);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.reflection_early_bird == studentID.toString()){
                    awardBadge(25);
                  }
                }
              }
            }
            mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
          }
        }


        totalPoints += (parseInt(practice_proficient) * 100); //assign points for each proficient ALEKS
        //assign points for each badge earned
        if (practice_proficient >= 1) {
          awardBadge(7);
        }
        if (practice_proficient >= 3) {
          awardBadge(8);
        }
        if (practice_proficient >= 7) {
          awardBadge(9);
        }
        if (practice_proficient >= 10) {
          awardBadge(10);
        }


        totalPoints += (parseInt(quizzes_attempted) * 100); //assign points for each quiz
        //assign points for each badge earned
        if (quizzes_attempted >= 1) {
          awardBadge(11);
        }
        if (quizzes_attempted >= 3) {
          awardBadge(12);
        }
        if (quizzes_attempted >= 7) {
          awardBadge(13);
        }
        if (quizzes_attempted >= 10) {
          awardBadge(14);
        }

        totalPoints += (parseInt(reflections_done) * 100);
        //assign points for each badge earned
        if (reflections_done >= 1) {
          awardBadge(28);
        }
        if (reflections_done >= 3) {
          awardBadge(29);
        }
        if (reflections_done >= 7) {
          awardBadge(30);
        }
        if (reflections_done >= 10) {
          awardBadge(31);
        }


        callback(null, totalPoints, badges);
      }

    });
  });
}

function updateCanvas(studentID, courseID, totalPoints, badges, callback) { // Update Canvas custom points column
  get_update_url(courseID, function(update_url){
    update_url = update_url + '/' + studentID;
    putAdminRequest(update_url, {
      column_data: {
        content: totalPoints.toString()
      }
    }, function(err, body) {
      callback(null, totalPoints, badges);
    });
  });
}

function getIndScoreAndBadges(studentID, courseID, callback){ // Get score and badge info for user
    computeScoreAndBadges(studentID, courseID, function(err, totalPoints, badges){ //compute scores
        updateCanvas(studentID, courseID, totalPoints, badges, callback); //update Canvas
    });
}

function getStudentProgress(studentID, courseID, callback) { // Get student progress for quizzes and tests (checkboxes)
  mongo.getAllData(courseID,function(mongo_data){
    getRequest(assignment_user_url(studentID, courseID), studentID, function(err, user_assigments) {
      moduleProgress = mongo_data.modules;
      if (err){
        console.log(err);
        callback(null, moduleProgress);
      } else if (user_assigments.status == "unauthorized"){
        console.log('User unauthorized');
        callback(null, moduleProgress);
      } else if (user_assigments.error>0){
        console.log(data.error);
        callback(null, 0, moduleProgress);
      } else if (user_assigments.length<1) {
        console.log('No User Assignments recorded');
        callback(null, moduleProgress);
      } else {
        //get quiz and aleks progress
        for (var i = 0; i < moduleProgress.length; i++) {
          var module_object = mongo_data.modules.find(module => module._id == i + 1);
          
          const practiceId_cutoff_obj = (array =>
            array.reduce((obj, x) => {
              obj[x.substring(0, x.indexOf('_')).trim()] = parseInt(x.substring(x.indexOf('_')+1).trim());
              return obj
            }, {}))(module_object.multiple_practice_cutoff.trim().split(','));

          const practice_objects = Object.keys(practiceId_cutoff_obj).map(practice_id => user_assigments.find(assignment => assignment.assignment_id == parseInt(practice_id)));

          if(practice_objects
            .every(practice_object => parseFloat(practice_object.grade) >= parseFloat(practiceId_cutoff_obj[practice_object.assignment_id + '']))){
              (moduleProgress[i]).practice_progress = true;
            } else {
              (moduleProgress[i]).practice_progress = false;
            }

          //quiz progress
          var quiz_object = user_assigments.find(assignment => assignment.assignment_id == module_object.quiz_link);
          if(quiz_object){
            (moduleProgress[i]).quiz_progress = parseFloat(quiz_object.grade) >= parseFloat(module_object.quiz_cutoff);
          } else {
            (moduleProgress[i]).quiz_progress = false;
          }



        }
        callback(null, moduleProgress);
      }
    });
  });
}

function getLeaderboardScores(studentID, courseID, callback) { // get all leaderboard scores

  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames, studentIndex) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }

    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare), mergeLeaderboardArrays(groupNames, scores)[parseInt(studentIndex)]);
  });

  function getSections(callback){
    function findIndexOfUser(studentIdsArrays) {
      for (var i = 0; i < studentIdsArrays.length; i++) {
        var index = studentIdsArrays[i].indexOf(parseInt(studentID));
        if (index > -1) {
          return i
        }
      }
    }

    getAdminRequest(sections_url(courseID),function(err,data){
      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ //disable leaderboard until sections are made
        callback(null,[],[],0);
      } else {
        groupNames = data.map(section => section.name);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        studentIndex = findIndexOfUser(studentIdsArrays);
        callback(null, studentIdsArrays, groupNames, studentIndex)
      }
    });
  }


  function getTotalScores(studentIdsArrays, groupNames, studentIndex, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames, studentIndex);
      });
    })
  }
}

function getAdminLeaderboardScores(courseID, callback){
  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }
    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare));
  });

  function getSections(callback){
    getAdminRequest(sections_url(courseID),function(err,data){

      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ // disable leaderboard until sections are made
        callback(null,[],[]);
      } else {
        groupNames = data.map(section => section.name);
        studentsArray = data.map(section => section.students);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        callback(null, studentIdsArrays, groupNames);
      }
    });
  }

  function getTotalScores(studentIdsArrays, groupNames, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames);
      });
    })
  }
}

function getStudents(courseID, callback){
  getAdminRequest(student_url(courseID),function(err,student_data){
    var student_data_sorted = student_data.sort(function(a, b) {
      var textA = a.sortable_name.toUpperCase();
      var textB = b.sortable_name.toUpperCase();
      return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    });
    callback(err,student_data_sorted);
  });
}

function getNextDailyYalie(courseID, callback){
  getAdminRequest(daily_yalie_url(courseID), function(err,dailies_data){
    var closest = Infinity;
    dailies_data.forEach(function(daily) {
      if (new Date(daily.due_at) >= new Date() && new Date(daily.due_at) < closest) {
          closest = daily;
      }
    });
    callback(null,closest);
  });
}

function computeScoreAndBadges_masquerade(studentID, courseID, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    //lucky bulldog
    lucky_bulldog_points = 100;
    var d = new Date();

    if (mongo_data.lucky_bulldogs.length>0){
      for (lucky_bulldog of mongo_data.lucky_bulldogs){
        console.log(lucky_bulldog);
        //student already was awarded lucky bulldog
        if(lucky_bulldog.awarded_ids.length>0){
          if (lucky_bulldog.awarded_ids.includes(studentID)){
            totalPoints += parseInt(lucky_bulldog_points);
          }
        }
      }
    }

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += parseInt(badge_info.Points);
      badges[badges.indexOf(badge_info)].Awarded = true;
    }

    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    getAdminRequest(assignment_user_url(studentID, courseID), function(err, data) {
      if (err){
        console.log(err);
        callback(err, 0, badges);
      } else if (data.status == "unauthorized"){
        console.log('User unauthorized');
        callback('User unauthorized', 0, badges);
      } else if (data.error){
        console.log(data.error);
        callback(data.error, 0, badges);
      } else if (data.length<1) {
        console.log('No Assignment Data Recorded');
        callback(null, 0, badges);
      } else {
        //Daily Yalie questions
        for (var i = 0; i < mongo_data.dailies.length; i++) {
          var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
          if (daily_object){
            var daily_grade = parseFloat(daily_object.grade);
            if (daily_grade == parseFloat(100)) {
              daily_done += 1
            }
          }
        }
        totalPoints += (parseInt(daily_done) * 50); //assign points for each daily
        //assign points for each badge earned
        if (daily_done >= 1) {
          awardBadge(1);
        }
        if (daily_done >= 5) {
          awardBadge(2);
        }
        if (daily_done >= 10) {
          awardBadge(3);
        }
        if (daily_done >= 15) {
          awardBadge(4);
        }
        if (daily_done >= 20) {
          awardBadge(5);
        }
        if (daily_done >= 25) {
          awardBadge(6);
        }

        for (var i = 0; i < mongo_data.modules.length; i++) {
          if (mongo_data.modules[i].open=='true'){

            //practice objectives proficient
            var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
            if (practice_object){
              var practice_grade = parseFloat(practice_object.grade);
              if (practice_grade >= parseFloat(mongo_data.modules[i].practice_cutoff)) {

                practice_proficient += 1;

                //Process Practice Early Bird Badge
                if(mongo_data.modules[i].leaderboard.practice_early_bird == ""){
                  mongo_data.modules[i].leaderboard.practice_early_bird = studentID.toString();
                  awardBadge(26);
                  } else {
                  if (mongo_data.modules[i].leaderboard.practice_early_bird == studentID.toString()){
                    awardBadge(26);
                  }
                }

                //Process Practice Leaderboard

                if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(20);
                  user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  }
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': practice_grade
                      });
                      awardBadge(20);
                      mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(21);
                      }
                    }
                  }
                }
              }
            }

            //quizzes attempted
            var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
            if (quiz_object){
              var quiz_grade = parseFloat(quiz_object.grade);
              if (quiz_grade > parseFloat(0)) {
                quizzes_attempted += 1;

                //Process Quiz Early Bird Badge
                if(mongo_data.modules[i].leaderboard.quiz_early_bird == ""){
                  mongo_data.modules[i].leaderboard.quiz_early_bird = studentID.toString();
                  awardBadge(24);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.quiz_early_bird == studentID.toString()){
                    awardBadge(24);
                  }
                }

                //Process Quiz Leaderboard

                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(22);
                  user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  }
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': quiz_grade
                      });
                      awardBadge(22);
                      mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(23);
                      }
                    }
                  }
                }
              }
            }

            //number of reflections
            var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
            if(reflection_object){
              var reflection_grade = parseFloat(reflection_object.grade);
              if (reflection_grade == parseFloat(100)) {
                reflections_done += 1;

                //Process Reflection Early Bird Badge
                if(mongo_data.modules[i].leaderboard.reflection_early_bird == ""){
                  mongo_data.modules[i].leaderboard.reflection_early_bird = studentID.toString();
                  awardBadge(25);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.reflection_early_bird == studentID.toString()){
                    awardBadge(25);
                  }
                }
              }
            }
            mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
          }
        }


        totalPoints += (parseInt(practice_proficient) * 100); //assign points for each proficient ALEKS
        //assign points for each badge earned
        if (practice_proficient >= 1) {
          awardBadge(7);
        }
        if (practice_proficient >= 3) {
          awardBadge(8);
        }
        if (practice_proficient >= 7) {
          awardBadge(9);
        }
        if (practice_proficient >= 10) {
          awardBadge(10);
        }


        totalPoints += (parseInt(quizzes_attempted) * 100); //assign points for each quiz
        //assign points for each badge earned
        if (quizzes_attempted >= 1) {
          awardBadge(11);
        }
        if (quizzes_attempted >= 3) {
          awardBadge(12);
        }
        if (quizzes_attempted >= 7) {
          awardBadge(13);
        }
        if (quizzes_attempted >= 10) {
          awardBadge(14);
        }

        totalPoints += (parseInt(reflections_done) * 100);
        //assign points for each badge earned
        if (reflections_done >= 1) {
          awardBadge(28);
        }
        if (reflections_done >= 3) {
          awardBadge(29);
        }
        if (reflections_done >= 7) {
          awardBadge(30);
        }
        if (reflections_done >= 10) {
          awardBadge(31);
        }


        callback(null, totalPoints, badges);
      }

    });
  });
}

function updateCanvas_masquerade(studentID, courseID, totalPoints, badges, callback) { // Update Canvas custom points column
  get_update_url(courseID, function(update_url){
    update_url = update_url + '/' + studentID;
    putAdminRequest(update_url, {
      column_data: {
        content: totalPoints.toString()
      }
    }, function(err, body) {
      callback(null, totalPoints, badges);
    });
  });
}

function getIndScoreAndBadges_masquerade(studentID, courseID, callback){ // Get score and badge info for user
    computeScoreAndBadges_masquerade(studentID, courseID, function(err, totalPoints, badges){ //compute scores
        updateCanvas_masquerade(studentID, courseID, totalPoints, badges, callback); //update Canvas
    });
}

function getStudentProgress_masquerade(studentID, courseID, callback) { // Get student progress for quizzes and tests (checkboxes)
  mongo.getAllData(courseID,function(mongo_data){
    getAdminRequest(assignment_user_url(studentID, courseID), function(err, user_assigments) {
      moduleProgress = mongo_data.modules;
      if (err){
        console.log(err);
        callback(null, moduleProgress);
      } else if (user_assigments.status == "unauthorized"){
        console.log('User unauthorized');
        callback(null, moduleProgress);
      } else if (user_assigments.error>0){
        console.log(data.error);
        callback(null, 0, moduleProgress);
      } else if (user_assigments.length<1) {
        console.log('No User Assignments recorded');
        callback(null, moduleProgress);
      } else {
        //get quiz and aleks progress
        for (var i = 0; i < moduleProgress.length; i++) {
          var module_object = mongo_data.modules.find(module => module._id == i + 1);

          //practice progress
          var practice_object = user_assigments.find(assignment => assignment.assignment_id == module_object.practice_link);
          if(practice_object){
            (moduleProgress[i]).practice_progress = parseFloat(practice_object.grade) >= parseFloat(module_object.practice_cutoff);
          } else {
            (moduleProgress[i]).practice_progress = false;
          }

          //quiz progress
          var quiz_object = user_assigments.find(assignment => assignment.assignment_id == module_object.quiz_link);
          if(quiz_object){
            (moduleProgress[i]).quiz_progress = parseFloat(quiz_object.grade) >= parseFloat(module_object.quiz_cutoff);
          } else {
            (moduleProgress[i]).quiz_progress = false;
          }

        }
        callback(null, moduleProgress);
      }
    });
  });
}

function getLeaderboardScores_masquerade(studentID, courseID, callback) { // get all leaderboard scores

  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames, studentIndex) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }

    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare), mergeLeaderboardArrays(groupNames, scores)[parseInt(studentIndex)]);
  });

  function getSections(callback){
    function findIndexOfUser(studentIdsArrays) {
      for (var i = 0; i < studentIdsArrays.length; i++) {
        var index = studentIdsArrays[i].indexOf(parseInt(studentID));
        if (index > -1) {
          return i
        }
      }
    }

    getAdminRequest(sections_url(courseID),function(err,data){
      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ //disable leaderboard until sections are made
        callback(null,[],[],0);
      } else {
        groupNames = data.map(section => section.name);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        studentIndex = findIndexOfUser(studentIdsArrays);
        callback(null, studentIdsArrays, groupNames, studentIndex)
      }
    });
  }


  function getTotalScores(studentIdsArrays, groupNames, studentIndex, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames, studentIndex);
      });
    })
  }
}

module.exports = {
  getRequest,
  postRequest,
  putRequest,
  getAdminRequest,
  postAdminRequest,
  putAdminRequest,
  getIndScoreAndBadges,
  getStudentProgress,
  getLeaderboardScores,
  getAdminLeaderboardScores,
  getStudents,
  getNextDailyYalie,
  getIndScoreAndBadges_masquerade,
  getStudentProgress_masquerade,
  getLeaderboardScores_masquerade,
}

======================
D:\devhub-production\heroku\uva-onexys\models\mongo.js
const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');
var asyncStuff = require('async');
var config = require('../bin/config');

function getData(courseID, collection_name, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        assert.equal(null, err);
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).find().sort({"_id":1}).toArray(function(err, data) {
            callback(err,data);
            client.close();
        });
    });
}

function insertData(courseID, collection_name, data, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).insertOne(data,
            function(err, result) {
                callback(err,result);
                client.close();
          });
    });
}

function updateData(courseID,collection_name,update_index,update_data, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).updateOne(update_index, {$set: update_data},
            function(err, result) {
                callback(err,result);
                client.close();
          });
    });
}

function deleteData(courseID, collection_name, delete_index,callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).deleteOne(delete_index,
            function(err, result) {
                callback(err, result);
                client.close();
          });
    });
}

function getHomeContent(courseID, callback){
    getData(courseID, 'home', function(err, data){
        home_updates = data.find(document => document.type == 'updates');
        home_videos = data.filter(document => document.type == 'video');
        home_links = data.filter(document => document.type == 'links')[0];
        callback(err, home_updates, home_videos, home_links);
      });
}

function getModule(courseID, moduleID, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        assert.equal(null, err);
        var db = client.db(config.mongoDBs[courseID]);
        db.collection('modules').findOne({"_id":parseInt(moduleID)},function(err, data) {
            function orderVids(a,b) {
                if (a.position < b.position)
                  return -1;
                if (a.position > b.position)
                  return 1;
                return 0;
              }
            if (data.videos){
                data.videos = data.videos.sort(orderVids)
            }
            callback(err,data);
            client.close();
        });
    });
}

function getAllData(courseID, callback_main){
    asyncStuff.parallel({
        'modules': function(callback) {
            getData(courseID, 'modules', callback)
        },
        'badges': function(callback) {
            getData(courseID, 'badges', callback)
        },
        'dailies': function(callback) {
            getData(courseID, 'dailies', callback)
        },
        'lucky_bulldogs': function(callback) {
            getData(courseID, 'lucky_bulldogs', callback)
        },
    }, function(err, results) {
        callback_main(results);
    });
}

module.exports = {
    getData,
    getAllData,
    insertData,
    updateData,
    deleteData,
    getHomeContent,
    getModule,
}

======================
D:\devhub-production\heroku\uva-onexys\models\queries.js
var config = require('../bin/config');
var request = require('request');
var asyncStuff = require('async');
var canvas = require('./canvas');
var mongo = require('./mongo');

function homepageQuery(studentID,courseID,callback){

  asyncStuff.parallel([
    function(callback) {
      canvas.getStudentProgress(studentID, courseID, callback);
    },
    function(callback){
      canvas.getIndScoreAndBadges(studentID, courseID, callback);
    },
    function(callback){
      canvas.getLeaderboardScores(studentID, courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        score = data[1][0],
        badges =  data[1][1],
        leaderboard = data[2][0],
        my_team = data[2][1],
        home_updates = data[3][0],
        home_vids = data[3][1],
        home_links = data[3][2],
        daily_yalie = data[4];

    function orderBadges(a,b) {
      if (a.Points < b.Points)
        return 1;
      if (a.Points > b.Points)
        return -1;
      return 0;
    }

    var awarded_badges = badges.filter(badge => badge.Awarded == true).sort(orderBadges);
    var awarded_badge_ids = awarded_badges.map(badge => badge._id);
    if (awarded_badge_ids.length>3){
      awarded_badge_ids = awarded_badge_ids.slice(0,3);
    }
    
    callback(module_progress, score, awarded_badge_ids, leaderboard, my_team, home_updates, home_vids, home_links, daily_yalie);
  });
}

function homepageQueryMasquerade(studentID,courseID,callback){

  asyncStuff.parallel([
    function(callback) {
      canvas.getStudentProgress_masquerade(studentID, courseID, callback);
    },
    function(callback){
      canvas.getIndScoreAndBadges_masquerade(studentID, courseID, callback);
    },
    function(callback){
      canvas.getLeaderboardScores_masquerade(studentID, courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        score = data[1][0],
        badges =  data[1][1],
        leaderboard = data[2][0],
        my_team = data[2][1],
        home_updates = data[3][0],
        home_vids = data[3][1],
        home_links = data[3][2],
        daily_yalie = data[4];

    function orderBadges(a,b) {
      if (a.Points < b.Points)
        return 1;
      if (a.Points > b.Points)
        return -1;
      return 0;
    }

    var awarded_badges = badges.filter(badge => badge.Awarded == true).sort(orderBadges);
    var awarded_badge_ids = awarded_badges.map(badge => badge._id);
    if (awarded_badge_ids.length>3){
      awarded_badge_ids = awarded_badge_ids.slice(0,3);
    }
    
    callback(module_progress, score, awarded_badge_ids, leaderboard, my_team, home_updates, home_vids, home_links, daily_yalie);
  });
}

function homepageAdminQuery(courseID, callback){

  asyncStuff.parallel([
    function(callback) {
      mongo.getAllData(courseID, function(mongo_data){
        callback(null, mongo_data.modules)
      });
    },
    function(callback){
      canvas.getAdminLeaderboardScores(courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getStudents(courseID,callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        leaderboard = data[1],
        home_updates = data[2][0],
        home_vids = data[2][1],
        home_links = data[2][2],
        students = data[3],
        daily_yalie=data[4];
    
    callback(module_progress, leaderboard, home_updates, home_vids, home_links, students, daily_yalie);
  });
}

function badgesQuery(studentID,courseID,callback){
  canvas.getIndScoreAndBadges(studentID, courseID, function(err, totalPoints, badges) {
    callback(badges);
  });
}

function badgesAdminQuery(courseID, callback){
  mongo.getAllData(courseID, function(mongo_data){
    callback(mongo_data.badges);
  })
}

module.exports = {
  homepageQuery,
  homepageQueryMasquerade,
  homepageAdminQuery,
  badgesQuery,
  badgesAdminQuery
}

======================
D:\devhub-production\heroku\uva-onexys\onexys_replace.py
# scans through all files in the current directory tree
# looking for instaches of:
#       'https://onexys.herokuapp.com
#       'https://yale.instructure.com
#
# print out the list of files which contained these

import os

def get_file_list(cwd):
    dir_contents = os.listdir(cwd)
    file_list = []
    for dir_item in dir_contents:
        full_path = os.path.join(cwd, dir_item)
        # If entry is a directory then get the list of files in this directory
        if os.path.isdir(full_path):
            file_list = file_list + get_file_list(full_path)
        else:
            file_list.append(full_path)

    return file_list


blacklist = ['.git', '.png', '.jpg', '.svg', '.pdf', 'mongodb_backups']

for f in get_file_list(os.getcwd()):
    # exclude many file types from this edit
    bad = False
    string = str(f)
    for b in blacklist:
        if b in string:
            bad = True
            break
    if bad:
        continue
    # end exclusion

    with open(f, 'r', encoding='latin-1') as contents:
        print(f)
        contents = contents.read()
        print(contents)
        print('======================')

======================
D:\devhub-production\heroku\uva-onexys\out.txt
D:\devhub-production\heroku\uva-onexys\.eslintrc.js
module.exports = {
    "extends": "google"
};
======================
D:\devhub-production\heroku\uva-onexys\app.js
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').load();
}

var express = require('express');
var path = require('path');
var config = require('./bin/config');
var logger = require('morgan');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('client-sessions');

var config = require('./bin/config');
var auth = require('./bin/auth')

var index = require('./routes/index');
var home = require('./routes/home');
var modules = require('./routes/modules');
var badges = require('./routes/badges');
var admin = require('./routes/admin')
var app = express();

var launch = require('./routes/canvasLaunch')

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
//app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.set('trust proxy', true);

app.use(cookieParser(config.client_secret));

app.use(session({
  cookieName: 'session',
  secret: config.client_secret,
  duration: 24 * 60 * 60 * 1000,
  activeDuration: 1000 * 60 * 5,
  cookie: {
    path: '/',
    ephemeral: false,
    httpOnly: true,
    secure: false
  }
}));

app.get('/callback',auth.oath2_callback);

app.get('/',index);
app.use('/home',[auth.updateCookies,auth.checkUser],home)
app.use('/badges',[auth.updateCookies,auth.checkUser],badges)
app.use('/admin',[auth.updateCookies,auth.checkAdmin],admin)

app.use('/modules',auth.updateCookies,modules)

app.use('/launch',launch)

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;

======================
D:\devhub-production\heroku\uva-onexys\app.json
{
    "name": "ONEXYS Canvas Application",
    "description": "An external tool for the ONEXYS program on the Canvas LMS",
    "repository": "https://github.com/suryadutta/ONEXYSappcom/",
    "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Yale_University_logo.svg/2000px-Yale_University_logo.svg.png",
    "keywords": ["ONEXYS", "LTI", "LMS","Yale","Node.JS"],
    "addons": [
        {
          "plan": "heroku-redis:hobby-dev"
        }
      ],
    "env":{
        "HEROKU_APP_NAME": {
            "required": true,
            "description": "Enter your application name here"
          },
        "CANVAS_URL":{
            "description": "The base URL for your deployment of Canvas",
            "value": "https://yale.instructure.com/"
        },
        "CANVAS_KEY":{
            "description": "A secret key to use when linking this app to your course (from school)."
        },
        "DEVELOPER_TOKEN":{
            "description": "A secret password to use when linking this app to your course (from school)."
        },
        "CANVAS_ADMIN_AUTH_TOKEN":{
            "description": "A generated Authentication token for a user with admin priviledges to the course."
        },
        "CANVAS_PAGE_RESULTS":{
            "description": "Default number of results to return from Canvas API. Needs to be larger than # of students in course",
            "value": "100"
        },
        "MONGO_USERNAME":{
            "description": "Username for all Mongo connections"
        },
        "MONGO_PASSWORD":{
            "description": "Password for all Mongo connections"
        }
    }
}
======================
D:\devhub-production\heroku\uva-onexys\bin\auth.js
var express = require('express');
var config = require('./config');
var request = require('request');
var Queue = require('better-queue');

var lti = require ('ims-lti');
var RedisNonceStore = require('../node_modules/ims-lti/lib/redis-nonce-store.js');
var redis = require("redis"),
    redis_client = redis.createClient(config.redisURL);

var store = new RedisNonceStore(config.client_id, redis_client);

if (!provider) {
  var provider = new lti.Provider(config.client_id, config.client_secret);
  console.log('Generating new provider...')
}

// Set the configuration settings
let credentials = {
  client: {
    id: config.client_id,
    secret: config.client_secret,
  },
  auth: {
    tokenHost: config.canvasURL,
    tokenPath: 'login/oauth2/token',
    authorizePath: 'login/oauth2/auth',
  },
};

let oauth2 = require('simple-oauth2').create(credentials);

//queue to callback Auth Token (prevents multiple calls)
var authTokenQueue = new Queue(function(user_id,callback){
  console.log('Redis Key');
  console.log('token_'+String(user_id));
  redis_client.get('token_'+String(user_id), async function(err, token_string) {
    if (err){
      console.log(err);
      callback(false);
    } else {
      token_obj = JSON.parse(token_string);
      let accessToken = await oauth2.accessToken.create(token_obj.token);
      // Check if the token is expired. If expired it is refreshed.
      if (accessToken.expired()) {
        try {
          // save refresh token to add later
          let refresh_token = accessToken.token.refresh_token;
          // get new access token from Canvas API
          accessToken = await accessToken.refresh(credentials.client);
          // add back the previous refresh token to use again
          accessToken.token.refresh_token = refresh_token;
          // save new access token to Redis store
          redis_client.set('token_'+String(user_id), JSON.stringify(accessToken));
          callback(accessToken.token.access_token)
        } catch (error) {
          console.log('Error refreshing access token: ', error.message);
          callback(false);
        }
      } else {
        callback(accessToken.token.access_token);
      }
    }
  });
});

//middleware to check if admin
var checkAdmin = function(req,res,next) {
    if (typeof req.session.admin == 'undefined' && !req.session.admin) {
      console.log('Err authenticating admin');
      res.send('Err authenticating admin');
    } else {
      next()
    }
}

//middleware to update course information
var updateCookies = function(req,res,next){

  if (typeof(req.body.custom_canvas_course_id)=='string' && req.query.login_success != 1){
    console.log('Assigning Cookies');
    req.session.course_id = req.body.custom_canvas_course_id;
    req.session.course_title = req.body.context_title;
    req.session.user_id = req.body.custom_canvas_user_id;
    req.session.admin = req.body.roles.includes('Instructor');
    next();
  } else if (typeof(req.session.course_id)!='string'){
    console.log('ERROR: COOKIES NOT SET');
    res.status(500).render('cookieError');
  } else {
    next();
  }
};

//middleware to check user and launch lti
var checkUser = function(req, res, next) { 

  if (typeof(req.session.course_id)!='string'){
    console.log('ERROR: COOKIES NOT SET');
    res.status(500).render('cookieError');;
  } else {
    console.log('Session Test: Course-ID');
    console.log(req.session.course_id);
    req.connection.encrypted = true;
    if (req.query.login_success=='1'){
      next();
    } else {      
      provider.valid_request(req, function(err, is_valid) {
        if (!is_valid) {
          console.log('Unverified User:');
          console.log(provider.valid_request);
          console.log(provider);
          res.send('Unverified User');
        } else {         
          //check if auth token already exists in Redis 
          console.log('Redis Key (Check User)');
          console.log('token_'+String(req.session.user_id));
          redis_client.exists('token_'+String(req.session.user_id), function(err, token_exists) {
            if (token_exists==0){
              // generate auth token
              let authorizationUri = oauth2.authorizationCode.authorizeURL({
                redirect_uri: config.redirectURL,
                state: String(req.session.user_id),
              });
              res.redirect(authorizationUri);
            } else {
              // auth token exists
              next();
            }
          });
        }
      });
    }
  }
}

//path for oauth2 callback from Canvas server
var oath2_callback = async function(req, res, next){

  console.log('Query');
  console.log(req.query);

  let code = req.query.code;
  let options = {
    code,
  };
  try {
    // create new access token from Canvas API
    let result = await oauth2.authorizationCode.getToken(options);
    let accessToken = await oauth2.accessToken.create(result);
    console.log(accessToken);
    // save access token to Redis
    redis_client.set('token_'+req.query.state, JSON.stringify(accessToken));
    return res.redirect('/home?login_success=1')
  } catch(error) {
    console.error('Access Token Error', error.message);
    return res.status(500).json('Authentication failed');
  }
}

module.exports = {
    oath2_callback,
    updateCookies,
    authTokenQueue,
    checkUser,
    checkAdmin
};

======================
D:\devhub-production\heroku\uva-onexys\bin\config.js
var config = {};

config.port = process.env.PORT || '3000';
config.host = process.env.HOST || 'localhost';

config.canvasURL = process.env.CANVAS_URL;
config.client_id = process.env.CANVAS_KEY;
config.client_secret = process.env.DEVELOPER_TOKEN;
config.redirectURL = process.env.REDIRECT_URL;

config.canvasAdminAuthToken= process.env.CANVAS_ADMIN_AUTH_TOKEN;
config.canvasPageResults = process.env.CANVAS_PAGE_RESULTS || "200";

config.redisURL = process.env.REDIS_URL || '';

config.mongo_username = process.env.MONGO_USERNAME || 'localhost',
config.mongo_password = process.env.MONGO_PASSWORD || '',
config.local_mongo_database = 'mongodb://localhost:27017/oneyxs_dev'

config.disableLeaderboard = process.env.DISABLE_LEADERBOARD.toLowerCase() == 'true' ? true : false || false;

//configure MongoDB urls here - course ID to mongoDB URL
config.mongoURL = 'mongodb://'+config.mongo_username+':'+config.mongo_password+'@conexcluster-shard-00-00-bgeoe.mongodb.net:27017,conexcluster-shard-00-01-bgeoe.mongodb.net:27017,conexcluster-shard-00-02-bgeoe.mongodb.net:27017/test?ssl=true&replicaSet=ConexCluster-shard-0&authSource=admin&retryWrites=true';

//add to list if we create new courses
//format is courseID: databaseName
config.mongoDBs = {
  '2517': 'conex',
}

//the name of the mongo db to connect to
config.mongo_db_name = process.env.MONGO_DB_NAME

config.cookieduration = 1000 * 60 * 60 * 24;

module.exports = config;

======================
D:\devhub-production\heroku\uva-onexys\bin\cron.js
#!/usr/bin/env node
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').load('../');
}

var asyncStuff = require('async');
var config = require('./config');
var mongo = require('../models/mongo');
var canvas = require('../models/canvas');

var assignment_url = (courseID) => {
  return config.canvasURL + 'api/v1/courses/' + courseID + '/students/submissions?student_ids[]=all&grouped=true&per_page=100'
};

var get_update_url = (courseID, callback) => {    
  getAdminRequest(notes_column_url(courseID),function(err,custom_columns){
    var points_id = custom_columns.find(column => column.title='Notes').id;
    var update_url = config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/' + points_id + '/data/';
    callback(update_url);
  });
}

function computeScoreAndBadges(courseID, studentID, data, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += badge_info.Points;
      badges[badges.indexOf(badge_info)].Awarded = true;
    }
    
    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    try {
      //Daily Yalie questions
      for (var i = 0; i < mongo_data.dailies.length; i++) {
        var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
        if (daily_object){
          var daily_grade = parseFloat(daily_object.grade);
          if (daily_grade == parseFloat(100)) {
            daily_done += 1
          }
        }
      }
      totalPoints += (daily_done * 50); //assign points for each daily
      //assign points for each badge earned
      if (daily_done >= 1) {
        awardBadge(1);
      }
      if (daily_done >= 5) {
        awardBadge(2);
      }
      if (daily_done >= 10) {
        awardBadge(3);
      }
      if (daily_done >= 15) {
        awardBadge(4);
      }
      if (daily_done >= 20) {
        awardBadge(5);
      }
      if (daily_done >= 25) {
        awardBadge(6);
      }

      for (var i = 0; i < mongo_data.modules.length; i++) {
        if (mongo_data.modules[i].open=='true'){
                  
          //practice objectives proficient
          var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
          if (practice_object){
            var practice_grade = parseFloat(practice_object.grade);
            if (practice_grade > parseFloat(mongo_data.modules[i].practice_cutoff)) {

              practice_proficient += 1;

              //Process Practice Leaderboard

              if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                //user is already on leaderboard
                awardBadge(20);
                user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                  'student_id': studentID.toString(),
                  'score': practice_grade
                }
                mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                  //user is top on leaderboard
                  awardBadge(21);
                }

              } else {
                // Process leaderboard if not full - add user automatically
                if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                  mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  });
                  awardBadge(20);
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }
                } else {
                  //user not on full leaderboard - compare scores and update
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  }
                }
              }
            }
          }

          //quizzes attempted
          var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
          if (quiz_object){
            var quiz_grade = parseFloat(quiz_object.grade);
            if (quiz_grade > parseFloat(0)) {
              quizzes_attempted += 1;

              //Process Quiz Leaderboard

              if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                //user is already on leaderboard
                awardBadge(22);
                user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                  'student_id': studentID.toString(),
                  'score': quiz_grade
                }
                mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                  //user is top on leaderboard
                  awardBadge(23);
                }

              } else {
                // Process leaderboard if not full - add user automatically
                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                  mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  });
                  awardBadge(22);
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }
                } else {
                  //user not on full leaderboard - compare scores and update
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  }
                }
              }
            }
          }

          //number of reflections
          var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
          if(reflection_object){
            var reflection_grade = parseFloat(reflection_object.grade);
            if (reflection_grade == parseFloat(100)) {
              reflections_done += 1;
            }
          }
          mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
        } 
      }


      totalPoints += (practice_proficient * 100); //assign points for each proficient ALEKS 
      //assign points for each badge earned
      if (practice_proficient >= 1) {
        awardBadge(7);
      }
      if (practice_proficient >= 3) {
        awardBadge(8);
      }
      if (practice_proficient >= 7) {
        awardBadge(9);
      }
      if (practice_proficient >= 10) {
        awardBadge(10);
      }

      
      totalPoints += (quizzes_attempted * 100); //assign points for each quiz
      //assign points for each badge earned
      if (quizzes_attempted >= 1) {
        awardBadge(11);
      }
      if (quizzes_attempted >= 3) {
        awardBadge(12);
      }
      if (quizzes_attempted >= 7) {
        awardBadge(13);
      }
      if (quizzes_attempted >= 10) {
        awardBadge(14);
      }

      totalPoints += (reflections_done * 100);
      //assign points for each badge earned
      if (reflections_done >= 1) {
        awardBadge(28);
      }
      if (reflections_done >= 3) {
        awardBadge(29);
      }
      if (reflections_done >= 7) {
        awardBadge(30);
      }
      if (reflections_done >= 10) {
        awardBadge(31);
      }

      callback(null, totalPoints, badges); 
      console.log('Done with Student '+studentID.toString());
   
    } catch (err) {
      console.log(err);
      callback(err, 0, badges)
    }
  });
}

var updateAllStudentData = function(courseID, callback){
  console.log('Working on Course '+String(courseID));
  canvas.getAdminRequest(assignment_url(courseID), function(err, users) {
    console.log('Updating '+String(users.length)+' Students..');
    for (let i = 0; i < users.length; i++) {
      setTimeout(function () {
        computeScoreAndBadges(courseID, users[i].user_id, users[i].submissions, function(err, totalPoints, badges) {
          get_update_url(courseID, function(update_url){
            update_url = update_url + '/' + studentID;
            putAdminRequest(update_url, {
              column_data: {
                content: totalPoints.toString()
              }
            }, function(err, body) {
              if (err){
                console.log(err);
              }
              callback(null, totalPoints, badges);
            });
          });
        });
      }, i * 1000);
    }
    callback('Done');
  });
}

var courses_array = [38080,38081,38082,38083]

asyncStuff.series([
  function(callback) {
    updateAllStudentData(courses_array[0],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[1],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[2],callback)
  },
  function(callback) {
    updateAllStudentData(courses_array[3],callback)
  },
],
// optional callback
function(err, results) {
  console.log('All Done!');
});

======================
D:\devhub-production\heroku\uva-onexys\bin\redis.js
var config = require('./config');
var client = require('redis').createClient(config.redisURL);  
module.exports = {
    client,
}
======================
D:\devhub-production\heroku\uva-onexys\bin\www
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('onexys-jade:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

======================
D:\devhub-production\heroku\uva-onexys\models\canvas.js
var config = require('../bin/config');
var auth = require('../bin/auth');
var request = require('request');
var asyncStuff = require('async');
var mongo = require('./mongo');

var add_page_number = (url) => {
  if(url.indexOf("?")>-1){
    return url+'&per_page='+String(config.canvasPageResults);
  } else{
    return url+'?per_page='+String(config.canvasPageResults);
  }
}

var assignment_user_url = (studentID, courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/students/submissions?student_ids[]=' + studentID
}

var notes_column_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/';
}

var get_update_url = (courseID, callback) => {
  getAdminRequest(notes_column_url(courseID),function(err,custom_columns){
    var points_id = custom_columns.find(column => column.title='Notes').id;
    var update_url = config.canvasURL + '/api/v1/courses/' + courseID + '/custom_gradebook_columns/' + points_id + '/data';
    callback(update_url);
  });
}

var sections_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/sections?include=students';
}

var student_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/' + courseID + '/users?enrollment_type=student';
}

var daily_yalie_url = (courseID) => {
  return config.canvasURL + '/api/v1/courses/'+ courseID+ '/assignments?search_term=Daily';
}

function getRequest(url, userID, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.get({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user GET request

function postRequest(url, userID, parameters, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.post({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
      form: parameters,
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user POST request

function putRequest(url, userID, parameters, callback) {
  url = add_page_number(url);
  auth.authTokenQueue.push(userID,function(auth_token){
    request.put({
      url: url,
      headers: {
        "Authorization": " Bearer " + auth_token,
      },
      form: parameters,
    }, function(error, response, body) {
      callback(null, JSON.parse(body));
    });
  });
} //user PUT request

function getAdminRequest(url, callback) {
  url = add_page_number(url);
  request.get({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin GET request

function postAdminRequest(url, parameters, callback) {
  url = add_page_number(url);
  request.post({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
    form: parameters,
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin POST request

function putAdminRequest(url, parameters, callback) {
  url = add_page_number(url);
  request.put({
    url: url,
    headers: {
      "Authorization": " Bearer " + config.canvasAdminAuthToken
    },
    form: parameters,
  }, function(error, response, body) {
    callback(null, JSON.parse(body));
  });
} //admin PUT request

function computeScoreAndBadges(studentID, courseID, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    //lucky bulldog
    lucky_bulldog_points = 100;
    var d = new Date();

    if (mongo_data.lucky_bulldogs.length>0){
      for (lucky_bulldog of mongo_data.lucky_bulldogs){
        console.log(lucky_bulldog);
        //student already was awarded lucky bulldog
        if(lucky_bulldog.awarded_ids.length>0){
          if (lucky_bulldog.awarded_ids.includes(studentID)){
            totalPoints += parseInt(lucky_bulldog_points);
          }
          else if (((d.getTime() - Date.parse(lucky_bulldog.time))/(1000*60))<1){
            totalPoints += parseInt(lucky_bulldog_points);
            lucky_bulldog.awarded_ids.push(studentID);
            mongo.updateData(courseID,'lucky_bulldogs',{ _id: parseInt(lucky_bulldog._id) },{awarded_ids: lucky_bulldog.awarded_ids}, function(err,result){});
          }
        } else if (((d.getTime() - Date.parse(lucky_bulldog.time))/(1000*60))<1){
          totalPoints += parseInt(lucky_bulldog_points);
          lucky_bulldog.awarded_ids.push(studentID);
          mongo.updateData(courseID,'lucky_bulldogs',{ _id: parseInt(lucky_bulldog._id) },{awarded_ids: lucky_bulldog.awarded_ids}, function(err,result){});
        }
      }
    }

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += parseInt(badge_info.Points);
      badges[badges.indexOf(badge_info)].Awarded = true;
    }

    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    getRequest(assignment_user_url(studentID, courseID),studentID, function(err, data) {
      if (err){
        console.log(err);
        callback(err, 0, badges);
      } else if (data.status == "unauthorized"){
        console.log('User unauthorized');
        callback('User unauthorized', 0, badges);
      } else if (data.error){
        console.log(data.error);
        callback(data.error, 0, badges);
      } else if (data.length<1) {
        console.log('No Assignment Data Recorded');
        callback(null, 0, badges);
      } else {
        //Daily Yalie questions
        for (var i = 0; i < mongo_data.dailies.length; i++) {
          var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
          if (daily_object){
            var daily_grade = parseFloat(daily_object.grade);
            if (daily_grade == parseFloat(100)) {
              daily_done += 1
            }
          }
        }
        totalPoints += (parseInt(daily_done) * 50); //assign points for each daily
        //assign points for each badge earned
        if (daily_done >= 1) {
          awardBadge(1);
        }
        if (daily_done >= 5) {
          awardBadge(2);
        }
        if (daily_done >= 10) {
          awardBadge(3);
        }
        if (daily_done >= 15) {
          awardBadge(4);
        }
        if (daily_done >= 20) {
          awardBadge(5);
        }
        if (daily_done >= 25) {
          awardBadge(6);
        }

        for (var i = 0; i < mongo_data.modules.length; i++) {
          if (mongo_data.modules[i].open=='true'){

            //practice objectives proficient
            var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
            if (practice_object){
              var practice_grade = parseFloat(practice_object.grade);
              if (practice_grade >= parseFloat(mongo_data.modules[i].practice_cutoff)) {

                practice_proficient += 1;

                //Process Practice Early Bird Badge
                if(mongo_data.modules[i].leaderboard.practice_early_bird == ""){
                  mongo_data.modules[i].leaderboard.practice_early_bird = studentID.toString();
                  awardBadge(26);
                  } else {
                  if (mongo_data.modules[i].leaderboard.practice_early_bird == studentID.toString()){
                    awardBadge(26);
                  }
                }

                //Process Practice Leaderboard

                if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(20);
                  user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  }
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': practice_grade
                      });
                      awardBadge(20);
                      mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(21);
                      }
                    }
                  }
                }
              }
            }

            //quizzes attempted
            var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
            if (quiz_object){
              var quiz_grade = parseFloat(quiz_object.grade);
              if (quiz_grade > parseFloat(0)) {
                quizzes_attempted += 1;

                //Process Quiz Early Bird Badge
                if(mongo_data.modules[i].leaderboard.quiz_early_bird == ""){
                  mongo_data.modules[i].leaderboard.quiz_early_bird = studentID.toString();
                  awardBadge(24);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.quiz_early_bird == studentID.toString()){
                    awardBadge(24);
                  }
                }

                //Process Quiz Leaderboard

                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(22);
                  user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  }
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': quiz_grade
                      });
                      awardBadge(22);
                      mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(23);
                      }
                    }
                  }
                }
              }
            }

            //number of reflections
            var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
            if(reflection_object){
              var reflection_grade = parseFloat(reflection_object.grade);
              if (reflection_grade == parseFloat(100)) {
                reflections_done += 1;

                //Process Reflection Early Bird Badge
                if(mongo_data.modules[i].leaderboard.reflection_early_bird == ""){
                  mongo_data.modules[i].leaderboard.reflection_early_bird = studentID.toString();
                  awardBadge(25);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.reflection_early_bird == studentID.toString()){
                    awardBadge(25);
                  }
                }
              }
            }
            mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
          }
        }


        totalPoints += (parseInt(practice_proficient) * 100); //assign points for each proficient ALEKS
        //assign points for each badge earned
        if (practice_proficient >= 1) {
          awardBadge(7);
        }
        if (practice_proficient >= 3) {
          awardBadge(8);
        }
        if (practice_proficient >= 7) {
          awardBadge(9);
        }
        if (practice_proficient >= 10) {
          awardBadge(10);
        }


        totalPoints += (parseInt(quizzes_attempted) * 100); //assign points for each quiz
        //assign points for each badge earned
        if (quizzes_attempted >= 1) {
          awardBadge(11);
        }
        if (quizzes_attempted >= 3) {
          awardBadge(12);
        }
        if (quizzes_attempted >= 7) {
          awardBadge(13);
        }
        if (quizzes_attempted >= 10) {
          awardBadge(14);
        }

        totalPoints += (parseInt(reflections_done) * 100);
        //assign points for each badge earned
        if (reflections_done >= 1) {
          awardBadge(28);
        }
        if (reflections_done >= 3) {
          awardBadge(29);
        }
        if (reflections_done >= 7) {
          awardBadge(30);
        }
        if (reflections_done >= 10) {
          awardBadge(31);
        }


        callback(null, totalPoints, badges);
      }

    });
  });
}

function updateCanvas(studentID, courseID, totalPoints, badges, callback) { // Update Canvas custom points column
  get_update_url(courseID, function(update_url){
    update_url = update_url + '/' + studentID;
    putAdminRequest(update_url, {
      column_data: {
        content: totalPoints.toString()
      }
    }, function(err, body) {
      callback(null, totalPoints, badges);
    });
  });
}

function getIndScoreAndBadges(studentID, courseID, callback){ // Get score and badge info for user
    computeScoreAndBadges(studentID, courseID, function(err, totalPoints, badges){ //compute scores
        updateCanvas(studentID, courseID, totalPoints, badges, callback); //update Canvas
    });
}

function getStudentProgress(studentID, courseID, callback) { // Get student progress for quizzes and tests (checkboxes)
  mongo.getAllData(courseID,function(mongo_data){
    getRequest(assignment_user_url(studentID, courseID), studentID, function(err, user_assigments) {
      moduleProgress = mongo_data.modules;
      if (err){
        console.log(err);
        callback(null, moduleProgress);
      } else if (user_assigments.status == "unauthorized"){
        console.log('User unauthorized');
        callback(null, moduleProgress);
      } else if (user_assigments.error>0){
        console.log(data.error);
        callback(null, 0, moduleProgress);
      } else if (user_assigments.length<1) {
        console.log('No User Assignments recorded');
        callback(null, moduleProgress);
      } else {
        //get quiz and aleks progress
        for (var i = 0; i < moduleProgress.length; i++) {
          var module_object = mongo_data.modules.find(module => module._id == i + 1);
          
          const practiceId_cutoff_obj = (array =>
            array.reduce((obj, x) => {
              obj[x.substring(0, x.indexOf('_')).trim()] = parseInt(x.substring(x.indexOf('_')+1).trim());
              return obj
            }, {}))(module_object.multiple_practice_cutoff.trim().split(','));

          const practice_objects = Object.keys(practiceId_cutoff_obj).map(practice_id => user_assigments.find(assignment => assignment.assignment_id == parseInt(practice_id)));

          if(practice_objects
            .every(practice_object => parseFloat(practice_object.grade) >= parseFloat(practiceId_cutoff_obj[practice_object.assignment_id + '']))){
              (moduleProgress[i]).practice_progress = true;
            } else {
              (moduleProgress[i]).practice_progress = false;
            }

          //quiz progress
          var quiz_object = user_assigments.find(assignment => assignment.assignment_id == module_object.quiz_link);
          if(quiz_object){
            (moduleProgress[i]).quiz_progress = parseFloat(quiz_object.grade) >= parseFloat(module_object.quiz_cutoff);
          } else {
            (moduleProgress[i]).quiz_progress = false;
          }



        }
        callback(null, moduleProgress);
      }
    });
  });
}

function getLeaderboardScores(studentID, courseID, callback) { // get all leaderboard scores

  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames, studentIndex) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }

    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare), mergeLeaderboardArrays(groupNames, scores)[parseInt(studentIndex)]);
  });

  function getSections(callback){
    function findIndexOfUser(studentIdsArrays) {
      for (var i = 0; i < studentIdsArrays.length; i++) {
        var index = studentIdsArrays[i].indexOf(parseInt(studentID));
        if (index > -1) {
          return i
        }
      }
    }

    getAdminRequest(sections_url(courseID),function(err,data){
      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ //disable leaderboard until sections are made
        callback(null,[],[],0);
      } else {
        groupNames = data.map(section => section.name);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        studentIndex = findIndexOfUser(studentIdsArrays);
        callback(null, studentIdsArrays, groupNames, studentIndex)
      }
    });
  }


  function getTotalScores(studentIdsArrays, groupNames, studentIndex, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames, studentIndex);
      });
    })
  }
}

function getAdminLeaderboardScores(courseID, callback){
  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }
    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare));
  });

  function getSections(callback){
    getAdminRequest(sections_url(courseID),function(err,data){

      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ // disable leaderboard until sections are made
        callback(null,[],[]);
      } else {
        groupNames = data.map(section => section.name);
        studentsArray = data.map(section => section.students);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        callback(null, studentIdsArrays, groupNames);
      }
    });
  }

  function getTotalScores(studentIdsArrays, groupNames, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames);
      });
    })
  }
}

function getStudents(courseID, callback){
  getAdminRequest(student_url(courseID),function(err,student_data){
    var student_data_sorted = student_data.sort(function(a, b) {
      var textA = a.sortable_name.toUpperCase();
      var textB = b.sortable_name.toUpperCase();
      return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    });
    callback(err,student_data_sorted);
  });
}

function getNextDailyYalie(courseID, callback){
  getAdminRequest(daily_yalie_url(courseID), function(err,dailies_data){
    var closest = Infinity;
    dailies_data.forEach(function(daily) {
      if (new Date(daily.due_at) >= new Date() && new Date(daily.due_at) < closest) {
          closest = daily;
      }
    });
    callback(null,closest);
  });
}

function computeScoreAndBadges_masquerade(studentID, courseID, callback){ // Return score and badges
  mongo.getAllData(courseID,function(mongo_data){
    var badges = mongo_data.badges;
    var totalPoints = 0;
    var practice_proficient = 0;
    var quizzes_attempted = 0;
    var daily_done = 0;
    var reflections_done = 0;

    //lucky bulldog
    lucky_bulldog_points = 100;
    var d = new Date();

    if (mongo_data.lucky_bulldogs.length>0){
      for (lucky_bulldog of mongo_data.lucky_bulldogs){
        console.log(lucky_bulldog);
        //student already was awarded lucky bulldog
        if(lucky_bulldog.awarded_ids.length>0){
          if (lucky_bulldog.awarded_ids.includes(studentID)){
            totalPoints += parseInt(lucky_bulldog_points);
          }
        }
      }
    }

    function awardBadge(badgeID) {
      badge_info = mongo_data.badges.find(badge => badge._id == badgeID);
      totalPoints += parseInt(badge_info.Points);
      badges[badges.indexOf(badge_info)].Awarded = true;
    }

    function sortLeaderboardScores(a,b) {
      if (a.score < b.score)
        return 1;
      if (a.score > b.score)
        return -1;
      return 0;
    }

    getAdminRequest(assignment_user_url(studentID, courseID), function(err, data) {
      if (err){
        console.log(err);
        callback(err, 0, badges);
      } else if (data.status == "unauthorized"){
        console.log('User unauthorized');
        callback('User unauthorized', 0, badges);
      } else if (data.error){
        console.log(data.error);
        callback(data.error, 0, badges);
      } else if (data.length<1) {
        console.log('No Assignment Data Recorded');
        callback(null, 0, badges);
      } else {
        //Daily Yalie questions
        for (var i = 0; i < mongo_data.dailies.length; i++) {
          var daily_object = data.find(daily => daily.assignment_id == (mongo_data.dailies[i]).assignment_id);
          if (daily_object){
            var daily_grade = parseFloat(daily_object.grade);
            if (daily_grade == parseFloat(100)) {
              daily_done += 1
            }
          }
        }
        totalPoints += (parseInt(daily_done) * 50); //assign points for each daily
        //assign points for each badge earned
        if (daily_done >= 1) {
          awardBadge(1);
        }
        if (daily_done >= 5) {
          awardBadge(2);
        }
        if (daily_done >= 10) {
          awardBadge(3);
        }
        if (daily_done >= 15) {
          awardBadge(4);
        }
        if (daily_done >= 20) {
          awardBadge(5);
        }
        if (daily_done >= 25) {
          awardBadge(6);
        }

        for (var i = 0; i < mongo_data.modules.length; i++) {
          if (mongo_data.modules[i].open=='true'){

            //practice objectives proficient
            var practice_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).practice_link);
            if (practice_object){
              var practice_grade = parseFloat(practice_object.grade);
              if (practice_grade >= parseFloat(mongo_data.modules[i].practice_cutoff)) {

                practice_proficient += 1;

                //Process Practice Early Bird Badge
                if(mongo_data.modules[i].leaderboard.practice_early_bird == ""){
                  mongo_data.modules[i].leaderboard.practice_early_bird = studentID.toString();
                  awardBadge(26);
                  } else {
                  if (mongo_data.modules[i].leaderboard.practice_early_bird == studentID.toString()){
                    awardBadge(26);
                  }
                }

                //Process Practice Leaderboard

                if(mongo_data.modules[i].leaderboard.practice_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(20);
                  user_index =  mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.practice_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': practice_grade
                  }
                  mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(21);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.practice_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': practice_grade
                    });
                    awardBadge(20);
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(21);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                    if (practice_grade > mongo_data.modules[i].leaderboard.practice_leaderboard[mongo_data.modules[i].leaderboard.practice_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.practice_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.practice_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': practice_grade
                      });
                      awardBadge(20);
                      mongo_data.modules[i].leaderboard.practice_leaderboard = mongo_data.modules[i].leaderboard.practice_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.practice_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(21);
                      }
                    }
                  }
                }
              }
            }

            //quizzes attempted
            var quiz_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).quiz_link);
            if (quiz_object){
              var quiz_grade = parseFloat(quiz_object.grade);
              if (quiz_grade > parseFloat(0)) {
                quizzes_attempted += 1;

                //Process Quiz Early Bird Badge
                if(mongo_data.modules[i].leaderboard.quiz_early_bird == ""){
                  mongo_data.modules[i].leaderboard.quiz_early_bird = studentID.toString();
                  awardBadge(24);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.quiz_early_bird == studentID.toString()){
                    awardBadge(24);
                  }
                }

                //Process Quiz Leaderboard

                if(mongo_data.modules[i].leaderboard.quiz_leaderboard.find(placement => placement.student_id==studentID)){
                  //user is already on leaderboard
                  awardBadge(22);
                  user_index =  mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)
                  mongo_data.modules[i].leaderboard.quiz_leaderboard[user_index] = {
                    'student_id': studentID.toString(),
                    'score': quiz_grade
                  }
                  mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                    //user is top on leaderboard
                    awardBadge(23);
                  }

                } else {
                  // Process leaderboard if not full - add user automatically
                  if(mongo_data.modules[i].leaderboard.quiz_leaderboard.length<10){
                    mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                      'student_id': studentID.toString(),
                      'score': quiz_grade
                    });
                    awardBadge(22);
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                      //user is top on leaderboard
                      awardBadge(23);
                    }
                  } else {
                    //user not on full leaderboard - compare scores and update
                    mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                    if (quiz_grade > mongo_data.modules[i].leaderboard.quiz_leaderboard[mongo_data.modules[i].leaderboard.quiz_leaderboard.length-1].score){
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.pop()
                      mongo_data.modules[i].leaderboard.quiz_leaderboard.push({
                        'student_id': studentID.toString(),
                        'score': quiz_grade
                      });
                      awardBadge(22);
                      mongo_data.modules[i].leaderboard.quiz_leaderboard = mongo_data.modules[i].leaderboard.quiz_leaderboard.sort(sortLeaderboardScores)
                      if(mongo_data.modules[i].leaderboard.quiz_leaderboard.findIndex(placement => placement.student_id==studentID)==0){
                        //user is top on leaderboard
                        awardBadge(23);
                      }
                    }
                  }
                }
              }
            }

            //number of reflections
            var reflection_object = data.find(assignment => assignment.assignment_id == (mongo_data.modules[i]).reflection_link);
            if(reflection_object){
              var reflection_grade = parseFloat(reflection_object.grade);
              if (reflection_grade == parseFloat(100)) {
                reflections_done += 1;

                //Process Reflection Early Bird Badge
                if(mongo_data.modules[i].leaderboard.reflection_early_bird == ""){
                  mongo_data.modules[i].leaderboard.reflection_early_bird = studentID.toString();
                  awardBadge(25);
                  mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],
                    function(err,result){});
                  } else {
                  if (mongo_data.modules[i].leaderboard.reflection_early_bird == studentID.toString()){
                    awardBadge(25);
                  }
                }
              }
            }
            mongo.updateData(courseID,'modules',{_id:(mongo_data.modules[i])._id},mongo_data.modules[i],function(err,result){});
          }
        }


        totalPoints += (parseInt(practice_proficient) * 100); //assign points for each proficient ALEKS
        //assign points for each badge earned
        if (practice_proficient >= 1) {
          awardBadge(7);
        }
        if (practice_proficient >= 3) {
          awardBadge(8);
        }
        if (practice_proficient >= 7) {
          awardBadge(9);
        }
        if (practice_proficient >= 10) {
          awardBadge(10);
        }


        totalPoints += (parseInt(quizzes_attempted) * 100); //assign points for each quiz
        //assign points for each badge earned
        if (quizzes_attempted >= 1) {
          awardBadge(11);
        }
        if (quizzes_attempted >= 3) {
          awardBadge(12);
        }
        if (quizzes_attempted >= 7) {
          awardBadge(13);
        }
        if (quizzes_attempted >= 10) {
          awardBadge(14);
        }

        totalPoints += (parseInt(reflections_done) * 100);
        //assign points for each badge earned
        if (reflections_done >= 1) {
          awardBadge(28);
        }
        if (reflections_done >= 3) {
          awardBadge(29);
        }
        if (reflections_done >= 7) {
          awardBadge(30);
        }
        if (reflections_done >= 10) {
          awardBadge(31);
        }


        callback(null, totalPoints, badges);
      }

    });
  });
}

function updateCanvas_masquerade(studentID, courseID, totalPoints, badges, callback) { // Update Canvas custom points column
  get_update_url(courseID, function(update_url){
    update_url = update_url + '/' + studentID;
    putAdminRequest(update_url, {
      column_data: {
        content: totalPoints.toString()
      }
    }, function(err, body) {
      callback(null, totalPoints, badges);
    });
  });
}

function getIndScoreAndBadges_masquerade(studentID, courseID, callback){ // Get score and badge info for user
    computeScoreAndBadges_masquerade(studentID, courseID, function(err, totalPoints, badges){ //compute scores
        updateCanvas_masquerade(studentID, courseID, totalPoints, badges, callback); //update Canvas
    });
}

function getStudentProgress_masquerade(studentID, courseID, callback) { // Get student progress for quizzes and tests (checkboxes)
  mongo.getAllData(courseID,function(mongo_data){
    getAdminRequest(assignment_user_url(studentID, courseID), function(err, user_assigments) {
      moduleProgress = mongo_data.modules;
      if (err){
        console.log(err);
        callback(null, moduleProgress);
      } else if (user_assigments.status == "unauthorized"){
        console.log('User unauthorized');
        callback(null, moduleProgress);
      } else if (user_assigments.error>0){
        console.log(data.error);
        callback(null, 0, moduleProgress);
      } else if (user_assigments.length<1) {
        console.log('No User Assignments recorded');
        callback(null, moduleProgress);
      } else {
        //get quiz and aleks progress
        for (var i = 0; i < moduleProgress.length; i++) {
          var module_object = mongo_data.modules.find(module => module._id == i + 1);

          //practice progress
          var practice_object = user_assigments.find(assignment => assignment.assignment_id == module_object.practice_link);
          if(practice_object){
            (moduleProgress[i]).practice_progress = parseFloat(practice_object.grade) >= parseFloat(module_object.practice_cutoff);
          } else {
            (moduleProgress[i]).practice_progress = false;
          }

          //quiz progress
          var quiz_object = user_assigments.find(assignment => assignment.assignment_id == module_object.quiz_link);
          if(quiz_object){
            (moduleProgress[i]).quiz_progress = parseFloat(quiz_object.grade) >= parseFloat(module_object.quiz_cutoff);
          } else {
            (moduleProgress[i]).quiz_progress = false;
          }

        }
        callback(null, moduleProgress);
      }
    });
  });
}

function getLeaderboardScores_masquerade(studentID, courseID, callback) { // get all leaderboard scores

  function mergeLeaderboardArrays(groupNames, scores) { //merge name and score arrays for leaderboard
    var combinedArray = []
    for (var i = 0; i < groupNames.length; i++) {
      combinedArray.push({
        'Name': groupNames[i],
        'Score': scores[i]
      })
    }
    if (groupNames.length < 3){
      fillerArray = Array(3-groupNames.length).fill({'Name': '','Score': 0});
      combinedArray = combinedArray.concat(fillerArray);
    }
    return combinedArray
  }

  asyncStuff.waterfall([
    getSections,
    getTotalScores,
  ], function(err, scores, groupNames, studentIndex) {
    function compare(a, b) {
      if (a.Score < b.Score) return 1;
      if (a.Score > b.Score) return -1;
      return 0;
    }

    callback(err, mergeLeaderboardArrays(groupNames, scores).sort(compare), mergeLeaderboardArrays(groupNames, scores)[parseInt(studentIndex)]);
  });

  function getSections(callback){
    function findIndexOfUser(studentIdsArrays) {
      for (var i = 0; i < studentIdsArrays.length; i++) {
        var index = studentIdsArrays[i].indexOf(parseInt(studentID));
        if (index > -1) {
          return i
        }
      }
    }

    getAdminRequest(sections_url(courseID),function(err,data){
      // remove section with all students
      for (var i = 0; i < data.length; i++) {
        if(data[i].students==null){
          data.splice(i, 1);
        }
      }
      if (data.length<1 || config.disableLeaderboard){ //disable leaderboard until sections are made
        callback(null,[],[],0);
      } else {
        groupNames = data.map(section => section.name);
        studentIdsArrays = data.map(section => section.students.map(studentInfo => studentInfo.id));
        studentIndex = findIndexOfUser(studentIdsArrays);
        callback(null, studentIdsArrays, groupNames, studentIndex)
      }
    });
  }


  function getTotalScores(studentIdsArrays, groupNames, studentIndex, callback2) {
    get_update_url(courseID, function(update_url){
      getAdminRequest(update_url, function(err, pointsInfo) {
        function getPointValue(studentID) {
          try {
            return parseInt((pointsInfo.find(studentInfo => studentInfo.user_id == studentID)).content);
          } catch (e) {
            return 0;
          }
        }
        var studentPoints = studentIdsArrays.map(studentIds => ((studentIds.map(studentId => getPointValue(studentId))).reduce((a, b) => a + b, 0)));
        callback2(null, studentPoints, groupNames, studentIndex);
      });
    })
  }
}

module.exports = {
  getRequest,
  postRequest,
  putRequest,
  getAdminRequest,
  postAdminRequest,
  putAdminRequest,
  getIndScoreAndBadges,
  getStudentProgress,
  getLeaderboardScores,
  getAdminLeaderboardScores,
  getStudents,
  getNextDailyYalie,
  getIndScoreAndBadges_masquerade,
  getStudentProgress_masquerade,
  getLeaderboardScores_masquerade,
}

======================
D:\devhub-production\heroku\uva-onexys\models\mongo.js
const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');
var asyncStuff = require('async');
var config = require('../bin/config');

function getData(courseID, collection_name, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        assert.equal(null, err);
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).find().sort({"_id":1}).toArray(function(err, data) {
            callback(err,data);
            client.close();
        });
    });
}

function insertData(courseID, collection_name, data, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).insertOne(data,
            function(err, result) {
                callback(err,result);
                client.close();
          });
    });
}

function updateData(courseID,collection_name,update_index,update_data, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).updateOne(update_index, {$set: update_data},
            function(err, result) {
                callback(err,result);
                client.close();
          });
    });
}

function deleteData(courseID, collection_name, delete_index,callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        var db = client.db(config.mongoDBs[courseID]);
        db.collection(collection_name).deleteOne(delete_index,
            function(err, result) {
                callback(err, result);
                client.close();
          });
    });
}

function getHomeContent(courseID, callback){
    getData(courseID, 'home', function(err, data){
        home_updates = data.find(document => document.type == 'updates');
        home_videos = data.filter(document => document.type == 'video');
        home_links = data.filter(document => document.type == 'links')[0];
        callback(err, home_updates, home_videos, home_links);
      });
}

function getModule(courseID, moduleID, callback){
    // Use connect method to connect to the server
    var connectionURL = config.mongoURL;
    MongoClient.connect(connectionURL, function(err, client) {
        assert.equal(null, err);
        var db = client.db(config.mongoDBs[courseID]);
        db.collection('modules').findOne({"_id":parseInt(moduleID)},function(err, data) {
            function orderVids(a,b) {
                if (a.position < b.position)
                  return -1;
                if (a.position > b.position)
                  return 1;
                return 0;
              }
            if (data.videos){
                data.videos = data.videos.sort(orderVids)
            }
            callback(err,data);
            client.close();
        });
    });
}

function getAllData(courseID, callback_main){
    asyncStuff.parallel({
        'modules': function(callback) {
            getData(courseID, 'modules', callback)
        },
        'badges': function(callback) {
            getData(courseID, 'badges', callback)
        },
        'dailies': function(callback) {
            getData(courseID, 'dailies', callback)
        },
        'lucky_bulldogs': function(callback) {
            getData(courseID, 'lucky_bulldogs', callback)
        },
    }, function(err, results) {
        callback_main(results);
    });
}

module.exports = {
    getData,
    getAllData,
    insertData,
    updateData,
    deleteData,
    getHomeContent,
    getModule,
}

======================
D:\devhub-production\heroku\uva-onexys\models\queries.js
var config = require('../bin/config');
var request = require('request');
var asyncStuff = require('async');
var canvas = require('./canvas');
var mongo = require('./mongo');

function homepageQuery(studentID,courseID,callback){

  asyncStuff.parallel([
    function(callback) {
      canvas.getStudentProgress(studentID, courseID, callback);
    },
    function(callback){
      canvas.getIndScoreAndBadges(studentID, courseID, callback);
    },
    function(callback){
      canvas.getLeaderboardScores(studentID, courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        score = data[1][0],
        badges =  data[1][1],
        leaderboard = data[2][0],
        my_team = data[2][1],
        home_updates = data[3][0],
        home_vids = data[3][1],
        home_links = data[3][2],
        daily_yalie = data[4];

    function orderBadges(a,b) {
      if (a.Points < b.Points)
        return 1;
      if (a.Points > b.Points)
        return -1;
      return 0;
    }

    var awarded_badges = badges.filter(badge => badge.Awarded == true).sort(orderBadges);
    var awarded_badge_ids = awarded_badges.map(badge => badge._id);
    if (awarded_badge_ids.length>3){
      awarded_badge_ids = awarded_badge_ids.slice(0,3);
    }
    
    callback(module_progress, score, awarded_badge_ids, leaderboard, my_team, home_updates, home_vids, home_links, daily_yalie);
  });
}

function homepageQueryMasquerade(studentID,courseID,callback){

  asyncStuff.parallel([
    function(callback) {
      canvas.getStudentProgress_masquerade(studentID, courseID, callback);
    },
    function(callback){
      canvas.getIndScoreAndBadges_masquerade(studentID, courseID, callback);
    },
    function(callback){
      canvas.getLeaderboardScores_masquerade(studentID, courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        score = data[1][0],
        badges =  data[1][1],
        leaderboard = data[2][0],
        my_team = data[2][1],
        home_updates = data[3][0],
        home_vids = data[3][1],
        home_links = data[3][2],
        daily_yalie = data[4];

    function orderBadges(a,b) {
      if (a.Points < b.Points)
        return 1;
      if (a.Points > b.Points)
        return -1;
      return 0;
    }

    var awarded_badges = badges.filter(badge => badge.Awarded == true).sort(orderBadges);
    var awarded_badge_ids = awarded_badges.map(badge => badge._id);
    if (awarded_badge_ids.length>3){
      awarded_badge_ids = awarded_badge_ids.slice(0,3);
    }
    
    callback(module_progress, score, awarded_badge_ids, leaderboard, my_team, home_updates, home_vids, home_links, daily_yalie);
  });
}

function homepageAdminQuery(courseID, callback){

  asyncStuff.parallel([
    function(callback) {
      mongo.getAllData(courseID, function(mongo_data){
        callback(null, mongo_data.modules)
      });
    },
    function(callback){
      canvas.getAdminLeaderboardScores(courseID, callback);
    },
    function(callback){
      mongo.getHomeContent(courseID, callback);
    },
    function(callback){
      canvas.getStudents(courseID,callback);
    },
    function(callback){
      canvas.getNextDailyYalie(courseID, callback);
    }
  ],
  
  function(err, data) {
    
    var module_progress = data[0],
        leaderboard = data[1],
        home_updates = data[2][0],
        home_vids = data[2][1],
        home_links = data[2][2],
        students = data[3],
        daily_yalie=data[4];
    
    callback(module_progress, leaderboard, home_updates, home_vids, home_links, students, daily_yalie);
  });
}

function badgesQuery(studentID,courseID,callback){
  canvas.getIndScoreAndBadges(studentID, courseID, function(err, totalPoints, badges) {
    callback(badges);
  });
}

function badgesAdminQuery(courseID, callback){
  mongo.getAllData(courseID, function(mongo_data){
    callback(mongo_data.badges);
  })
}

module.exports = {
  homepageQuery,
  homepageQueryMasquerade,
  homepageAdminQuery,
  badgesQuery,
  badgesAdminQuery
}

======================
D:\devhub-production\heroku\uva-onexys\package-lock.json
{
  "name": "onexys-app",
  "version": "2.0.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "@types/babel-types": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/@types/babel-types/-/babel-types-7.0.2.tgz",
      "integrity": "sha512-ylggu8DwwxT6mk3jVoJeohWAePWMNWEYm06MSoJ19kwp3hT9eY2Z4NNZn3oevzgFmClgNQ2GQF500hPDvNsGHg=="
    },
    "@types/babylon": {
      "version": "6.16.2",
      "resolved": "https://registry.npmjs.org/@types/babylon/-/babylon-6.16.2.tgz",
      "integrity": "sha512-+Jty46mPaWe1VAyZbfvgJM4BAdklLWxrT5tc/RjvCgLrtk6gzRY6AOnoWFv4p6hVxhJshDdr2hGVn56alBp97Q==",
      "requires": {
        "@types/babel-types": "*"
      }
    },
    "accepts": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.5.tgz",
      "integrity": "sha1-63d99gEXI6OxTopywIBcjoZ0a9I=",
      "requires": {
        "mime-types": "~2.1.18",
        "negotiator": "0.6.1"
      }
    },
    "acorn": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-3.3.0.tgz",
      "integrity": "sha1-ReN/s56No/JbruP/U2niu18iAXo="
    },
    "acorn-globals": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/acorn-globals/-/acorn-globals-3.1.0.tgz",
      "integrity": "sha1-/YJw9x+7SZawBPqIDuXUZXOnMb8=",
      "requires": {
        "acorn": "^4.0.4"
      },
      "dependencies": {
        "acorn": {
          "version": "4.0.13",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-4.0.13.tgz",
          "integrity": "sha1-EFSVrlNh1pe9GVyCUZLhrX8lN4c="
        }
      }
    },
    "ajv": {
      "version": "5.5.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz",
      "integrity": "sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU=",
      "requires": {
        "co": "^4.6.0",
        "fast-deep-equal": "^1.0.0",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.3.0"
      }
    },
    "align-text": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/align-text/-/align-text-0.1.4.tgz",
      "integrity": "sha1-DNkKVhCT810KmSVsIrcGlDP60Rc=",
      "requires": {
        "kind-of": "^3.0.2",
        "longest": "^1.0.1",
        "repeat-string": "^1.5.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY="
    },
    "asn1": {
      "version": "0.1.11",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz",
      "integrity": "sha1-VZvhg3bQik7E2+gId9J4GGObLfc="
    },
    "assert-plus": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.5.tgz",
      "integrity": "sha1-7nQAlBMALYTOxyGcasgRgS5yMWA="
    },
    "async": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/async/-/async-2.6.1.tgz",
      "integrity": "sha512-fNEiL2+AZt6AlAw/29Cr0UDe4sRAHCpEHh54WMz+Bb7QfNcFw4h3loofyJpLeQs4Yx7yuqu/2dLgM5hKOs6HlQ==",
      "requires": {
        "lodash": "^4.17.10"
      }
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "aws-sign2": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz",
      "integrity": "sha1-xXED96F/wDfwLXwuZLYC6iI/fWM="
    },
    "aws4": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.7.0.tgz",
      "integrity": "sha512-32NDda82rhwD9/JBCCkB+MRYDp0oSvlo2IL6rQWA10PQi7tDUM3eqMSltXmY+Oyl/7N3P3qNtAlv7X0d9bI28w=="
    },
    "babel-runtime": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz",
      "integrity": "sha1-llxwWGaOgrVde/4E/yM3vItWR/4=",
      "requires": {
        "core-js": "^2.4.0",
        "regenerator-runtime": "^0.11.0"
      }
    },
    "babel-types": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-types/-/babel-types-6.26.0.tgz",
      "integrity": "sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc=",
      "requires": {
        "babel-runtime": "^6.26.0",
        "esutils": "^2.0.2",
        "lodash": "^4.17.4",
        "to-fast-properties": "^1.0.3"
      }
    },
    "babylon": {
      "version": "6.18.0",
      "resolved": "https://registry.npmjs.org/babylon/-/babylon-6.18.0.tgz",
      "integrity": "sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="
    },
    "basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "requires": {
        "safe-buffer": "5.1.2"
      }
    },
    "bcrypt-pbkdf": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz",
      "integrity": "sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40=",
      "optional": true,
      "requires": {
        "tweetnacl": "^0.14.3"
      }
    },
    "better-queue": {
      "version": "3.8.7",
      "resolved": "https://registry.npmjs.org/better-queue/-/better-queue-3.8.7.tgz",
      "integrity": "sha512-OD1yiyXPwIcoicNFeV1hLf4HkmB4V60Pm+hnYsmfY2+HJO5A0nR8vFuJyTjuNxLlGWfv2a4RFq1TRHbxvQNizw==",
      "requires": {
        "better-queue-memory": "^1.0.1",
        "node-eta": "^0.9.0",
        "uuid": "^3.0.0"
      }
    },
    "better-queue-memory": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/better-queue-memory/-/better-queue-memory-1.0.2.tgz",
      "integrity": "sha1-qm0WmqHQzHdAkYXLnLXH3CUbzUE="
    },
    "bird": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/bird/-/bird-0.7.0.tgz",
      "integrity": "sha1-Hxd/2kzXW/G1QJvGx/RkGPW6o+Y=",
      "requires": {
        "request": "~2.49.0"
      },
      "dependencies": {
        "mime-types": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-1.0.2.tgz",
          "integrity": "sha1-mVrhOSq4r/y/yyZB3QVOlDwNXc4="
        },
        "node-uuid": {
          "version": "1.4.8",
          "resolved": "https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.8.tgz",
          "integrity": "sha1-sEDrCSOWivq/jTL7HxfxFn/auQc="
        },
        "request": {
          "version": "2.49.0",
          "resolved": "https://registry.npmjs.org/request/-/request-2.49.0.tgz",
          "integrity": "sha1-DU9jSNwzSAWbVT5Ntg/SR43mYqc=",
          "requires": {
            "aws-sign2": "~0.5.0",
            "bl": "~0.9.0",
            "caseless": "~0.8.0",
            "combined-stream": "~0.0.5",
            "forever-agent": "~0.5.0",
            "form-data": "~0.1.0",
            "hawk": "1.1.1",
            "http-signature": "~0.10.0",
            "json-stringify-safe": "~5.0.0",
            "mime-types": "~1.0.1",
            "node-uuid": "~1.4.0",
            "oauth-sign": "~0.5.0",
            "qs": "~2.3.1",
            "stringstream": "~0.0.4",
            "tough-cookie": ">=0.12.0",
            "tunnel-agent": "~0.4.0"
          }
        }
      }
    },
    "bl": {
      "version": "0.9.5",
      "resolved": "https://registry.npmjs.org/bl/-/bl-0.9.5.tgz",
      "integrity": "sha1-wGt5evCF6gC8Unr8jvzxHeIjIFQ=",
      "requires": {
        "readable-stream": "~1.0.26"
      }
    },
    "bluebird": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.5.1.tgz",
      "integrity": "sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA=="
    },
    "body-parser": {
      "version": "1.18.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
      "requires": {
        "bytes": "3.0.0",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "http-errors": "~1.6.3",
        "iconv-lite": "0.4.23",
        "on-finished": "~2.3.0",
        "qs": "6.5.2",
        "raw-body": "2.3.3",
        "type-is": "~1.6.16"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "qs": {
          "version": "6.5.2",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA=="
        }
      }
    },
    "boom": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/boom/-/boom-0.4.2.tgz",
      "integrity": "sha1-emNune1O/O+xnO9JR6PGffrukRs=",
      "requires": {
        "hoek": "0.9.x"
      }
    },
    "browser-detect": {
      "version": "0.2.28",
      "resolved": "https://registry.npmjs.org/browser-detect/-/browser-detect-0.2.28.tgz",
      "integrity": "sha512-KeWGHqYQmHDkCFG2dIiX/2wFUgqevbw/rd6wNi9N6rZbaSJFtG5kel0HtprRwCGp8sqpQP79LzDJXf/WCx4WAw==",
      "requires": {
        "core-js": "^2.5.7"
      }
    },
    "bson": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-1.1.0.tgz",
      "integrity": "sha512-9Aeai9TacfNtWXOYarkFJRW2CWo+dRon+fuLZYJmvLV3+MiUp0bEI6IAZfXEIg7/Pl/7IWlLaDnhzTsD81etQA=="
    },
    "bytes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg="
    },
    "camelcase": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-1.2.1.tgz",
      "integrity": "sha1-m7UwTS4LVmmLLHWLCKPqqdqlijk="
    },
    "canvas-api": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/canvas-api/-/canvas-api-3.6.0.tgz",
      "integrity": "sha512-8xowAXdykUtvBd2XucIyBcb38QvoQ+QZT8blKsP64Fcyd5ZAvivdPLTbi+ahinwFrup6L7Q9+pQiuHMcNefrvg==",
      "requires": {
        "date-fns": "1.29.0",
        "dotenv": "^5.0.1",
        "parse-link-header": "1.0.1",
        "tiny-json-http": "7.0.0"
      },
      "dependencies": {
        "dotenv": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-5.0.1.tgz",
          "integrity": "sha512-4As8uPrjfwb7VXC+WnLCbXK7y+Ueb2B3zgNCePYfhxS1PYeaO1YTeplffTEcbfLhvFNGLAz90VvJs9yomG7bow=="
        }
      }
    },
    "caseless": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.8.0.tgz",
      "integrity": "sha1-W8oogdQUN/VLJAfr40iIx7mtT30="
    },
    "center-align": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/center-align/-/center-align-0.1.3.tgz",
      "integrity": "sha1-qg0yYptu6XIgBBHL1EYckHvCt60=",
      "requires": {
        "align-text": "^0.1.3",
        "lazy-cache": "^1.0.3"
      }
    },
    "character-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/character-parser/-/character-parser-2.2.0.tgz",
      "integrity": "sha1-x84o821LzZdE5f/CxfzeHHMmH8A=",
      "requires": {
        "is-regex": "^1.0.3"
      }
    },
    "clean-css": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-4.1.11.tgz",
      "integrity": "sha1-Ls3xRaujj1R0DybO/Q/z4D4SXWo=",
      "requires": {
        "source-map": "0.5.x"
      }
    },
    "client-sessions": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/client-sessions/-/client-sessions-0.8.0.tgz",
      "integrity": "sha1-p9jFVYrV1W8qGZ81M+tlS134k/0=",
      "requires": {
        "cookies": "^0.7.0"
      }
    },
    "cliui": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-2.1.0.tgz",
      "integrity": "sha1-S0dXYP+AJkx2LDoXGQMukcf+oNE=",
      "requires": {
        "center-align": "^0.1.1",
        "right-align": "^0.1.1",
        "wordwrap": "0.0.2"
      }
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="
    },
    "combined-stream": {
      "version": "0.0.7",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.7.tgz",
      "integrity": "sha1-ATfmV7qlp1QcV6w3rF/AfXO03B8=",
      "requires": {
        "delayed-stream": "0.0.5"
      }
    },
    "connect-redis": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/connect-redis/-/connect-redis-3.3.3.tgz",
      "integrity": "sha512-rpWsW2uk1uOe/ccY/JvW+RiLrhZm7auIx8z4yR+KXemFTIhJyD58jXiJbI0E/fZCnybawpdSqOZ+6/ah6aBeyg==",
      "requires": {
        "debug": "^3.1.0",
        "redis": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
          "requires": {
            "ms": "2.0.0"
          }
        }
      }
    },
    "constantinople": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/constantinople/-/constantinople-3.1.2.tgz",
      "integrity": "sha512-yePcBqEFhLOqSBtwYOGGS1exHo/s1xjekXiinh4itpNQGCu4KA1euPh1fg07N2wMITZXQkBz75Ntdt1ctGZouw==",
      "requires": {
        "@types/babel-types": "^7.0.0",
        "@types/babylon": "^6.16.2",
        "babel-types": "^6.26.0",
        "babylon": "^6.18.0"
      }
    },
    "content-disposition": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
      "integrity": "sha1-DPaLud318r55YcOoUXjLhdunjLQ="
    },
    "content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
    },
    "cookie": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
      "integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s="
    },
    "cookie-parser": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.3.tgz",
      "integrity": "sha1-D+MfoZ0AC5X0qt8fU/3CuKIDuqU=",
      "requires": {
        "cookie": "0.3.1",
        "cookie-signature": "1.0.6"
      }
    },
    "cookie-session": {
      "version": "2.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/cookie-session/-/cookie-session-2.0.0-beta.3.tgz",
      "integrity": "sha512-zyqm5tA0z9yMEB/xyP7lnRnqp8eLR2e0dap+9+rBwVigla9yPKn8XTL1jJymog8xjfrowqW2o5LUjixQChkqrw==",
      "requires": {
        "cookies": "0.7.1",
        "debug": "3.1.0",
        "on-headers": "~1.0.1",
        "safe-buffer": "5.1.1"
      },
      "dependencies": {
        "debug": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "safe-buffer": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
          "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="
        }
      }
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "cookies": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookies/-/cookies-0.7.1.tgz",
      "integrity": "sha1-fIphX1SBxhq58WyDNzG8uPZjuZs=",
      "requires": {
        "depd": "~1.1.1",
        "keygrip": "~1.0.2"
      }
    },
    "core-js": {
      "version": "2.5.7",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.5.7.tgz",
      "integrity": "sha512-RszJCAxg/PP6uzXVXL6BsxSXx/B05oJAQ2vkJRjyjrEcNVycaqOmNb5OTxZPE3xa5gwZduqza6L9JOCenh/Ecw=="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "crc": {
      "version": "3.4.4",
      "resolved": "https://registry.npmjs.org/crc/-/crc-3.4.4.tgz",
      "integrity": "sha1-naHpgOO9RPxck79as9ozeNheRms="
    },
    "cryptiles": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz",
      "integrity": "sha1-7ZH/HxetE9N0gohZT4pIoNJvMlw=",
      "requires": {
        "boom": "0.4.x"
      }
    },
    "ctype": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/ctype/-/ctype-0.5.3.tgz",
      "integrity": "sha1-gsGMJGH3QRTvFsE1IkrQuRRMoS8="
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "requires": {
        "assert-plus": "^1.0.0"
      },
      "dependencies": {
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        }
      }
    },
    "date-fns": {
      "version": "1.29.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-1.29.0.tgz",
      "integrity": "sha512-lbTXWZ6M20cWH8N9S6afb0SBm6tMk+uUg6z3MqHPKE9atmsY3kJkTm8vKe93izJ2B2+q5MV990sM2CHgtAZaOw=="
    },
    "debug": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
      "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
      "requires": {
        "ms": "^2.1.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
        }
      }
    },
    "decamelize": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
      "integrity": "sha1-9lNNFRSCabIDUue+4m9QH5oZEpA="
    },
    "delayed-stream": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-0.0.5.tgz",
      "integrity": "sha1-1LH0OpPoKW3+AmlPRoC8N6MTxz8="
    },
    "depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
    },
    "destroy": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
    },
    "doctypes": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/doctypes/-/doctypes-1.1.0.tgz",
      "integrity": "sha1-6oCxBqh1OHdOijpKWv4pPeSJ4Kk="
    },
    "dotenv": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-6.2.0.tgz",
      "integrity": "sha512-HygQCKUBSFl8wKQZBSemMywRWcEDNidvNbjGVyZu3nbZ8qq9ubiPoGLMdRDpfSrpkkm9BXYFkpKxxFX38o/76w=="
    },
    "double-ended-queue": {
      "version": "2.1.0-0",
      "resolved": "https://registry.npmjs.org/double-ended-queue/-/double-ended-queue-2.1.0-0.tgz",
      "integrity": "sha1-ED01J/0xUo9AGIEwyEHv3XgmTlw="
    },
    "ecc-jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz",
      "integrity": "sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU=",
      "optional": true,
      "requires": {
        "jsbn": "~0.1.0"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "esutils": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz",
      "integrity": "sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
    },
    "express": {
      "version": "4.16.4",
      "resolved": "https://registry.npmjs.org/express/-/express-4.16.4.tgz",
      "integrity": "sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==",
      "requires": {
        "accepts": "~1.3.5",
        "array-flatten": "1.1.1",
        "body-parser": "1.18.3",
        "content-disposition": "0.5.2",
        "content-type": "~1.0.4",
        "cookie": "0.3.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.1.1",
        "fresh": "0.5.2",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.2",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.4",
        "qs": "6.5.2",
        "range-parser": "~1.2.0",
        "safe-buffer": "5.1.2",
        "send": "0.16.2",
        "serve-static": "1.13.2",
        "setprototypeof": "1.1.0",
        "statuses": "~1.4.0",
        "type-is": "~1.6.16",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "qs": {
          "version": "6.5.2",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA=="
        },
        "statuses": {
          "version": "1.4.0",
          "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz",
          "integrity": "sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew=="
        }
      }
    },
    "express-session": {
      "version": "1.15.6",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.15.6.tgz",
      "integrity": "sha512-r0nrHTCYtAMrFwZ0kBzZEXa1vtPVrw0dKvGSrKP4dahwBQ1BJpF2/y1Pp4sCD/0kvxV4zZeclyvfmw0B4RMJQA==",
      "requires": {
        "cookie": "0.3.1",
        "cookie-signature": "1.0.6",
        "crc": "3.4.4",
        "debug": "2.6.9",
        "depd": "~1.1.1",
        "on-headers": "~1.0.1",
        "parseurl": "~1.3.2",
        "uid-safe": "~2.1.5",
        "utils-merge": "1.0.1"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "utils-merge": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
          "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
        }
      }
    },
    "extend": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
      "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
    },
    "fast-deep-equal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz",
      "integrity": "sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="
    },
    "fast-json-stable-stringify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz",
      "integrity": "sha1-1RQsDK7msRifh9OnYREGT4bIu/I="
    },
    "finalhandler": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz",
      "integrity": "sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.2",
        "statuses": "~1.4.0",
        "unpipe": "~1.0.0"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "statuses": {
          "version": "1.4.0",
          "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz",
          "integrity": "sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew=="
        }
      }
    },
    "forever-agent": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.2.tgz",
      "integrity": "sha1-bQ4JxJIflKJ/Y9O0nF/v8epMUTA="
    },
    "form-data": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-0.1.4.tgz",
      "integrity": "sha1-kavXiKupcCsaq/qLwBAxoqyeOxI=",
      "requires": {
        "async": "~0.9.0",
        "combined-stream": "~0.0.4",
        "mime": "~1.2.11"
      },
      "dependencies": {
        "async": {
          "version": "0.9.2",
          "resolved": "https://registry.npmjs.org/async/-/async-0.9.2.tgz",
          "integrity": "sha1-rqdNXmHB+JlhO/ZL2mbUx48v0X0="
        }
      }
    },
    "forwarded": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz",
      "integrity": "sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "requires": {
        "assert-plus": "^1.0.0"
      },
      "dependencies": {
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        }
      }
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
    },
    "har-validator": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz",
      "integrity": "sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0=",
      "requires": {
        "ajv": "^5.1.0",
        "har-schema": "^2.0.0"
      }
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "hawk": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/hawk/-/hawk-1.1.1.tgz",
      "integrity": "sha1-h81JH5tG5OKurKM1QWdmiF0tHtk=",
      "requires": {
        "boom": "0.4.x",
        "cryptiles": "0.2.x",
        "hoek": "0.9.x",
        "sntp": "0.2.x"
      }
    },
    "hoek": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz",
      "integrity": "sha1-PTIkYrrfB3Fup+uFuviAec3c5QU="
    },
    "http-errors": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
      "integrity": "sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.0",
        "statuses": ">= 1.4.0 < 2"
      }
    },
    "http-signature": {
      "version": "0.10.1",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-0.10.1.tgz",
      "integrity": "sha1-T72sEyVZqoMjEh5UB3nAoBKyfmY=",
      "requires": {
        "asn1": "0.1.11",
        "assert-plus": "^0.1.5",
        "ctype": "0.5.3"
      }
    },
    "iconv-lite": {
      "version": "0.4.23",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ims-lti": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/ims-lti/-/ims-lti-3.0.2.tgz",
      "integrity": "sha1-inOBxiKrgTvjvxilqiTryoyyhgs=",
      "requires": {
        "node-uuid": "~1.4.0",
        "xml2js": "~0.4.0",
        "xmlbuilder": "~2.4.0"
      },
      "dependencies": {
        "node-uuid": {
          "version": "1.4.8",
          "resolved": "https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.8.tgz",
          "integrity": "sha1-sEDrCSOWivq/jTL7HxfxFn/auQc="
        }
      }
    },
    "inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
    },
    "ipaddr.js": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.8.0.tgz",
      "integrity": "sha1-6qM9bd16zo9/b+DJygRA5wZzix4="
    },
    "is-buffer": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz",
      "integrity": "sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w=="
    },
    "is-expression": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-expression/-/is-expression-3.0.0.tgz",
      "integrity": "sha1-Oayqa+f9HzRx3ELHQW5hwkMXrJ8=",
      "requires": {
        "acorn": "~4.0.2",
        "object-assign": "^4.0.1"
      },
      "dependencies": {
        "acorn": {
          "version": "4.0.13",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-4.0.13.tgz",
          "integrity": "sha1-EFSVrlNh1pe9GVyCUZLhrX8lN4c="
        }
      }
    },
    "is-promise": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-2.1.0.tgz",
      "integrity": "sha1-eaKp7OfwlugPNtKy87wWwf9L8/o="
    },
    "is-regex": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.0.4.tgz",
      "integrity": "sha1-VRdIm1RwkbCTDglWVM7SXul+lJE=",
      "requires": {
        "has": "^1.0.1"
      }
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
    },
    "isemail": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/isemail/-/isemail-3.1.2.tgz",
      "integrity": "sha512-zfRhJn9rFSGhzU5tGZqepRSAj3+g6oTOHxMGGriWNJZzyLPUK8H7VHpqKntegnW8KLyGA9zwuNaCoopl40LTpg==",
      "requires": {
        "punycode": "2.x.x"
      },
      "dependencies": {
        "punycode": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
          "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
        }
      }
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "joi": {
      "version": "13.4.0",
      "resolved": "https://registry.npmjs.org/joi/-/joi-13.4.0.tgz",
      "integrity": "sha512-JuK4GjEu6j7zr9FuVe2MAseZ6si/8/HaY0qMAejfDFHp7jcH4OKE937mIHM5VT4xDS0q7lpQbszbxKV9rm0yUg==",
      "requires": {
        "hoek": "5.x.x",
        "isemail": "3.x.x",
        "topo": "3.x.x"
      },
      "dependencies": {
        "hoek": {
          "version": "5.0.3",
          "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.3.tgz",
          "integrity": "sha512-Bmr56pxML1c9kU+NS51SMFkiVQAb+9uFfXwyqR2tn4w2FPvmPt65eZ9aCcEfRXd9G74HkZnILC6p967pED4aiw=="
        }
      }
    },
    "js-stringify": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/js-stringify/-/js-stringify-1.0.2.tgz",
      "integrity": "sha1-Fzb939lyTyijaCrcYjCufk6Weds="
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
      "optional": true
    },
    "json-schema": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="
    },
    "json-schema-traverse": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz",
      "integrity": "sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "jsprim": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.2.3",
        "verror": "1.10.0"
      },
      "dependencies": {
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        }
      }
    },
    "jstransformer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/jstransformer/-/jstransformer-1.0.0.tgz",
      "integrity": "sha1-7Yvwkh4vPx7U1cGkT2hwntJHIsM=",
      "requires": {
        "is-promise": "^2.0.0",
        "promise": "^7.0.1"
      }
    },
    "keygrip": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/keygrip/-/keygrip-1.0.2.tgz",
      "integrity": "sha1-rTKXxVcGneqLz+ek+kkbdcXd65E="
    },
    "kind-of": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
      "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
      "requires": {
        "is-buffer": "^1.1.5"
      }
    },
    "lazy-cache": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/lazy-cache/-/lazy-cache-1.0.4.tgz",
      "integrity": "sha1-odePw6UEdMuAhF07O24dpJpEbo4="
    },
    "lodash": {
      "version": "4.17.11",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.11.tgz",
      "integrity": "sha512-cQKh8igo5QUhZ7lg38DYWAxMvjSAKG0A8wGSVimP07SIUEK2UO+arSRKbRZWtelMtN5V0Hkwh5ryOto/SshYIg=="
    },
    "lodash-node": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/lodash-node/-/lodash-node-2.4.1.tgz",
      "integrity": "sha1-6oL3sQDHM9GkKvdoAeUGEF4qgOw="
    },
    "longest": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/longest/-/longest-1.0.1.tgz",
      "integrity": "sha1-MKCy2jj3N3DoKUoNIuZiXtd9AJc="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime": {
      "version": "1.2.11",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.2.11.tgz",
      "integrity": "sha1-WCA+7Ybjpe8XrtK32evUfwpg3RA="
    },
    "mime-db": {
      "version": "1.33.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz",
      "integrity": "sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ=="
    },
    "mime-types": {
      "version": "2.1.18",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz",
      "integrity": "sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ==",
      "requires": {
        "mime-db": "~1.33.0"
      }
    },
    "mongodb": {
      "version": "3.1.13",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.1.13.tgz",
      "integrity": "sha512-sz2dhvBZQWf3LRNDhbd30KHVzdjZx9IKC0L+kSZ/gzYquCF5zPOgGqRz6sSCqYZtKP2ekB4nfLxhGtzGHnIKxA==",
      "requires": {
        "mongodb-core": "3.1.11",
        "safe-buffer": "^5.1.2"
      }
    },
    "mongodb-core": {
      "version": "3.1.11",
      "resolved": "https://registry.npmjs.org/mongodb-core/-/mongodb-core-3.1.11.tgz",
      "integrity": "sha512-rD2US2s5qk/ckbiiGFHeu+yKYDXdJ1G87F6CG3YdaZpzdOm5zpoAZd/EKbPmFO6cQZ+XVXBXBJ660sSI0gc6qg==",
      "requires": {
        "bson": "^1.1.0",
        "require_optional": "^1.0.1",
        "safe-buffer": "^5.1.2",
        "saslprep": "^1.0.0"
      }
    },
    "morgan": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.9.1.tgz",
      "integrity": "sha512-HQStPIV4y3afTiCYVxirakhlCfGkI161c76kKFca7Fk1JusM//Qeo1ej2XaMniiNeaZklMVrh3vTtIzpzwbpmA==",
      "requires": {
        "basic-auth": "~2.0.0",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.1"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "negotiator": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz",
      "integrity": "sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk="
    },
    "node-eta": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/node-eta/-/node-eta-0.9.0.tgz",
      "integrity": "sha1-n7CwmbzSoCGUDmA8ZCVNwAPZp6g="
    },
    "npm": {
      "version": "6.9.0",
      "resolved": "https://registry.npmjs.org/npm/-/npm-6.9.0.tgz",
      "integrity": "sha512-91V+zB5hDxO+Jyp2sUKS7juHlIM95dGQxTeQtmZI1nAI/7kjWXFipPrtwwKjhyKmV4GsS2LzJhrxRjGWsU9z/w==",
      "requires": {
        "JSONStream": "^1.3.5",
        "abbrev": "~1.1.1",
        "ansicolors": "~0.3.2",
        "ansistyles": "~0.1.3",
        "aproba": "^2.0.0",
        "archy": "~1.0.0",
        "bin-links": "^1.1.2",
        "bluebird": "^3.5.3",
        "byte-size": "^5.0.1",
        "cacache": "^11.3.2",
        "call-limit": "~1.1.0",
        "chownr": "^1.1.1",
        "ci-info": "^2.0.0",
        "cli-columns": "^3.1.2",
        "cli-table3": "^0.5.1",
        "cmd-shim": "~2.0.2",
        "columnify": "~1.5.4",
        "config-chain": "^1.1.12",
        "debuglog": "*",
        "detect-indent": "~5.0.0",
        "detect-newline": "^2.1.0",
        "dezalgo": "~1.0.3",
        "editor": "~1.0.0",
        "figgy-pudding": "^3.5.1",
        "find-npm-prefix": "^1.0.2",
        "fs-vacuum": "~1.2.10",
        "fs-write-stream-atomic": "~1.0.10",
        "gentle-fs": "^2.0.1",
        "glob": "^7.1.3",
        "graceful-fs": "^4.1.15",
        "has-unicode": "~2.0.1",
        "hosted-git-info": "^2.7.1",
        "iferr": "^1.0.2",
        "imurmurhash": "*",
        "inflight": "~1.0.6",
        "inherits": "~2.0.3",
        "ini": "^1.3.5",
        "init-package-json": "^1.10.3",
        "is-cidr": "^3.0.0",
        "json-parse-better-errors": "^1.0.2",
        "lazy-property": "~1.0.0",
        "libcipm": "^3.0.3",
        "libnpm": "^2.0.1",
        "libnpmaccess": "*",
        "libnpmhook": "^5.0.2",
        "libnpmorg": "*",
        "libnpmsearch": "*",
        "libnpmteam": "*",
        "libnpx": "^10.2.0",
        "lock-verify": "^2.1.0",
        "lockfile": "^1.0.4",
        "lodash._baseindexof": "*",
        "lodash._baseuniq": "~4.6.0",
        "lodash._bindcallback": "*",
        "lodash._cacheindexof": "*",
        "lodash._createcache": "*",
        "lodash._getnative": "*",
        "lodash.clonedeep": "~4.5.0",
        "lodash.restparam": "*",
        "lodash.union": "~4.6.0",
        "lodash.uniq": "~4.5.0",
        "lodash.without": "~4.4.0",
        "lru-cache": "^4.1.5",
        "meant": "~1.0.1",
        "mississippi": "^3.0.0",
        "mkdirp": "~0.5.1",
        "move-concurrently": "^1.0.1",
        "node-gyp": "^3.8.0",
        "nopt": "~4.0.1",
        "normalize-package-data": "^2.5.0",
        "npm-audit-report": "^1.3.2",
        "npm-cache-filename": "~1.0.2",
        "npm-install-checks": "~3.0.0",
        "npm-lifecycle": "^2.1.0",
        "npm-package-arg": "^6.1.0",
        "npm-packlist": "^1.4.1",
        "npm-pick-manifest": "^2.2.3",
        "npm-profile": "*",
        "npm-registry-fetch": "^3.9.0",
        "npm-user-validate": "~1.0.0",
        "npmlog": "~4.1.2",
        "once": "~1.4.0",
        "opener": "^1.5.1",
        "osenv": "^0.1.5",
        "pacote": "^9.5.0",
        "path-is-inside": "~1.0.2",
        "promise-inflight": "~1.0.1",
        "qrcode-terminal": "^0.12.0",
        "query-string": "^6.2.0",
        "qw": "~1.0.1",
        "read": "~1.0.7",
        "read-cmd-shim": "~1.0.1",
        "read-installed": "~4.0.3",
        "read-package-json": "^2.0.13",
        "read-package-tree": "^5.2.2",
        "readable-stream": "^3.1.1",
        "readdir-scoped-modules": "*",
        "request": "^2.88.0",
        "retry": "^0.12.0",
        "rimraf": "^2.6.3",
        "safe-buffer": "^5.1.2",
        "semver": "^5.6.0",
        "sha": "~2.0.1",
        "slide": "~1.1.6",
        "sorted-object": "~2.0.1",
        "sorted-union-stream": "~2.1.3",
        "ssri": "^6.0.1",
        "stringify-package": "^1.0.0",
        "tar": "^4.4.8",
        "text-table": "~0.2.0",
        "tiny-relative-date": "^1.3.0",
        "uid-number": "0.0.6",
        "umask": "~1.1.0",
        "unique-filename": "^1.1.1",
        "unpipe": "~1.0.0",
        "update-notifier": "^2.5.0",
        "uuid": "^3.3.2",
        "validate-npm-package-license": "^3.0.4",
        "validate-npm-package-name": "~3.0.0",
        "which": "^1.3.1",
        "worker-farm": "^1.6.0",
        "write-file-atomic": "^2.4.2"
      },
      "dependencies": {
        "JSONStream": {
          "version": "1.3.5",
          "bundled": true,
          "requires": {
            "jsonparse": "^1.2.0",
            "through": ">=2.2.7 <3"
          }
        },
        "abbrev": {
          "version": "1.1.1",
          "bundled": true
        },
        "agent-base": {
          "version": "4.2.1",
          "bundled": true,
          "requires": {
            "es6-promisify": "^5.0.0"
          }
        },
        "agentkeepalive": {
          "version": "3.4.1",
          "bundled": true,
          "requires": {
            "humanize-ms": "^1.2.1"
          }
        },
        "ajv": {
          "version": "5.5.2",
          "bundled": true,
          "requires": {
            "co": "^4.6.0",
            "fast-deep-equal": "^1.0.0",
            "fast-json-stable-stringify": "^2.0.0",
            "json-schema-traverse": "^0.3.0"
          }
        },
        "ansi-align": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "string-width": "^2.0.0"
          }
        },
        "ansi-regex": {
          "version": "2.1.1",
          "bundled": true
        },
        "ansi-styles": {
          "version": "3.2.1",
          "bundled": true,
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "ansicolors": {
          "version": "0.3.2",
          "bundled": true
        },
        "ansistyles": {
          "version": "0.1.3",
          "bundled": true
        },
        "aproba": {
          "version": "2.0.0",
          "bundled": true
        },
        "archy": {
          "version": "1.0.0",
          "bundled": true
        },
        "are-we-there-yet": {
          "version": "1.1.4",
          "bundled": true,
          "requires": {
            "delegates": "^1.0.0",
            "readable-stream": "^2.0.6"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "asap": {
          "version": "2.0.6",
          "bundled": true
        },
        "asn1": {
          "version": "0.2.4",
          "bundled": true,
          "requires": {
            "safer-buffer": "~2.1.0"
          }
        },
        "assert-plus": {
          "version": "1.0.0",
          "bundled": true
        },
        "asynckit": {
          "version": "0.4.0",
          "bundled": true
        },
        "aws-sign2": {
          "version": "0.7.0",
          "bundled": true
        },
        "aws4": {
          "version": "1.8.0",
          "bundled": true
        },
        "balanced-match": {
          "version": "1.0.0",
          "bundled": true
        },
        "bcrypt-pbkdf": {
          "version": "1.0.2",
          "bundled": true,
          "optional": true,
          "requires": {
            "tweetnacl": "^0.14.3"
          }
        },
        "bin-links": {
          "version": "1.1.2",
          "bundled": true,
          "requires": {
            "bluebird": "^3.5.0",
            "cmd-shim": "^2.0.2",
            "gentle-fs": "^2.0.0",
            "graceful-fs": "^4.1.11",
            "write-file-atomic": "^2.3.0"
          }
        },
        "block-stream": {
          "version": "0.0.9",
          "bundled": true,
          "requires": {
            "inherits": "~2.0.0"
          }
        },
        "bluebird": {
          "version": "3.5.3",
          "bundled": true
        },
        "boxen": {
          "version": "1.3.0",
          "bundled": true,
          "requires": {
            "ansi-align": "^2.0.0",
            "camelcase": "^4.0.0",
            "chalk": "^2.0.1",
            "cli-boxes": "^1.0.0",
            "string-width": "^2.0.0",
            "term-size": "^1.2.0",
            "widest-line": "^2.0.0"
          }
        },
        "brace-expansion": {
          "version": "1.1.11",
          "bundled": true,
          "requires": {
            "balanced-match": "^1.0.0",
            "concat-map": "0.0.1"
          }
        },
        "buffer-from": {
          "version": "1.0.0",
          "bundled": true
        },
        "builtins": {
          "version": "1.0.3",
          "bundled": true
        },
        "byline": {
          "version": "5.0.0",
          "bundled": true
        },
        "byte-size": {
          "version": "5.0.1",
          "bundled": true
        },
        "cacache": {
          "version": "11.3.2",
          "bundled": true,
          "requires": {
            "bluebird": "^3.5.3",
            "chownr": "^1.1.1",
            "figgy-pudding": "^3.5.1",
            "glob": "^7.1.3",
            "graceful-fs": "^4.1.15",
            "lru-cache": "^5.1.1",
            "mississippi": "^3.0.0",
            "mkdirp": "^0.5.1",
            "move-concurrently": "^1.0.1",
            "promise-inflight": "^1.0.1",
            "rimraf": "^2.6.2",
            "ssri": "^6.0.1",
            "unique-filename": "^1.1.1",
            "y18n": "^4.0.0"
          },
          "dependencies": {
            "chownr": {
              "version": "1.1.1",
              "bundled": true
            },
            "lru-cache": {
              "version": "5.1.1",
              "bundled": true,
              "requires": {
                "yallist": "^3.0.2"
              }
            },
            "unique-filename": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "unique-slug": "^2.0.0"
              }
            },
            "yallist": {
              "version": "3.0.3",
              "bundled": true
            }
          }
        },
        "call-limit": {
          "version": "1.1.0",
          "bundled": true
        },
        "camelcase": {
          "version": "4.1.0",
          "bundled": true
        },
        "capture-stack-trace": {
          "version": "1.0.0",
          "bundled": true
        },
        "caseless": {
          "version": "0.12.0",
          "bundled": true
        },
        "chalk": {
          "version": "2.4.1",
          "bundled": true,
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "chownr": {
          "version": "1.1.1",
          "bundled": true
        },
        "ci-info": {
          "version": "2.0.0",
          "bundled": true
        },
        "cidr-regex": {
          "version": "2.0.10",
          "bundled": true,
          "requires": {
            "ip-regex": "^2.1.0"
          }
        },
        "cli-boxes": {
          "version": "1.0.0",
          "bundled": true
        },
        "cli-columns": {
          "version": "3.1.2",
          "bundled": true,
          "requires": {
            "string-width": "^2.0.0",
            "strip-ansi": "^3.0.1"
          }
        },
        "cli-table3": {
          "version": "0.5.1",
          "bundled": true,
          "requires": {
            "colors": "^1.1.2",
            "object-assign": "^4.1.0",
            "string-width": "^2.1.1"
          }
        },
        "cliui": {
          "version": "4.1.0",
          "bundled": true,
          "requires": {
            "string-width": "^2.1.1",
            "strip-ansi": "^4.0.0",
            "wrap-ansi": "^2.0.0"
          },
          "dependencies": {
            "ansi-regex": {
              "version": "3.0.0",
              "bundled": true
            },
            "strip-ansi": {
              "version": "4.0.0",
              "bundled": true,
              "requires": {
                "ansi-regex": "^3.0.0"
              }
            }
          }
        },
        "clone": {
          "version": "1.0.4",
          "bundled": true
        },
        "cmd-shim": {
          "version": "2.0.2",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "mkdirp": "~0.5.0"
          }
        },
        "co": {
          "version": "4.6.0",
          "bundled": true
        },
        "code-point-at": {
          "version": "1.1.0",
          "bundled": true
        },
        "color-convert": {
          "version": "1.9.1",
          "bundled": true,
          "requires": {
            "color-name": "^1.1.1"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "bundled": true
        },
        "colors": {
          "version": "1.3.3",
          "bundled": true,
          "optional": true
        },
        "columnify": {
          "version": "1.5.4",
          "bundled": true,
          "requires": {
            "strip-ansi": "^3.0.0",
            "wcwidth": "^1.0.0"
          }
        },
        "combined-stream": {
          "version": "1.0.6",
          "bundled": true,
          "requires": {
            "delayed-stream": "~1.0.0"
          }
        },
        "concat-map": {
          "version": "0.0.1",
          "bundled": true
        },
        "concat-stream": {
          "version": "1.6.2",
          "bundled": true,
          "requires": {
            "buffer-from": "^1.0.0",
            "inherits": "^2.0.3",
            "readable-stream": "^2.2.2",
            "typedarray": "^0.0.6"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "config-chain": {
          "version": "1.1.12",
          "bundled": true,
          "requires": {
            "ini": "^1.3.4",
            "proto-list": "~1.2.1"
          }
        },
        "configstore": {
          "version": "3.1.2",
          "bundled": true,
          "requires": {
            "dot-prop": "^4.1.0",
            "graceful-fs": "^4.1.2",
            "make-dir": "^1.0.0",
            "unique-string": "^1.0.0",
            "write-file-atomic": "^2.0.0",
            "xdg-basedir": "^3.0.0"
          }
        },
        "console-control-strings": {
          "version": "1.1.0",
          "bundled": true
        },
        "copy-concurrently": {
          "version": "1.0.5",
          "bundled": true,
          "requires": {
            "aproba": "^1.1.1",
            "fs-write-stream-atomic": "^1.0.8",
            "iferr": "^0.1.5",
            "mkdirp": "^0.5.1",
            "rimraf": "^2.5.4",
            "run-queue": "^1.0.0"
          },
          "dependencies": {
            "aproba": {
              "version": "1.2.0",
              "bundled": true
            },
            "iferr": {
              "version": "0.1.5",
              "bundled": true
            }
          }
        },
        "core-util-is": {
          "version": "1.0.2",
          "bundled": true
        },
        "create-error-class": {
          "version": "3.0.2",
          "bundled": true,
          "requires": {
            "capture-stack-trace": "^1.0.0"
          }
        },
        "cross-spawn": {
          "version": "5.1.0",
          "bundled": true,
          "requires": {
            "lru-cache": "^4.0.1",
            "shebang-command": "^1.2.0",
            "which": "^1.2.9"
          }
        },
        "crypto-random-string": {
          "version": "1.0.0",
          "bundled": true
        },
        "cyclist": {
          "version": "0.2.2",
          "bundled": true
        },
        "dashdash": {
          "version": "1.14.1",
          "bundled": true,
          "requires": {
            "assert-plus": "^1.0.0"
          }
        },
        "debug": {
          "version": "3.1.0",
          "bundled": true,
          "requires": {
            "ms": "2.0.0"
          },
          "dependencies": {
            "ms": {
              "version": "2.0.0",
              "bundled": true
            }
          }
        },
        "debuglog": {
          "version": "1.0.1",
          "bundled": true
        },
        "decamelize": {
          "version": "1.2.0",
          "bundled": true
        },
        "decode-uri-component": {
          "version": "0.2.0",
          "bundled": true
        },
        "deep-extend": {
          "version": "0.5.1",
          "bundled": true
        },
        "defaults": {
          "version": "1.0.3",
          "bundled": true,
          "requires": {
            "clone": "^1.0.2"
          }
        },
        "delayed-stream": {
          "version": "1.0.0",
          "bundled": true
        },
        "delegates": {
          "version": "1.0.0",
          "bundled": true
        },
        "detect-indent": {
          "version": "5.0.0",
          "bundled": true
        },
        "detect-newline": {
          "version": "2.1.0",
          "bundled": true
        },
        "dezalgo": {
          "version": "1.0.3",
          "bundled": true,
          "requires": {
            "asap": "^2.0.0",
            "wrappy": "1"
          }
        },
        "dot-prop": {
          "version": "4.2.0",
          "bundled": true,
          "requires": {
            "is-obj": "^1.0.0"
          }
        },
        "dotenv": {
          "version": "5.0.1",
          "bundled": true
        },
        "duplexer3": {
          "version": "0.1.4",
          "bundled": true
        },
        "duplexify": {
          "version": "3.6.0",
          "bundled": true,
          "requires": {
            "end-of-stream": "^1.0.0",
            "inherits": "^2.0.1",
            "readable-stream": "^2.0.0",
            "stream-shift": "^1.0.0"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "ecc-jsbn": {
          "version": "0.1.2",
          "bundled": true,
          "optional": true,
          "requires": {
            "jsbn": "~0.1.0",
            "safer-buffer": "^2.1.0"
          }
        },
        "editor": {
          "version": "1.0.0",
          "bundled": true
        },
        "encoding": {
          "version": "0.1.12",
          "bundled": true,
          "requires": {
            "iconv-lite": "~0.4.13"
          }
        },
        "end-of-stream": {
          "version": "1.4.1",
          "bundled": true,
          "requires": {
            "once": "^1.4.0"
          }
        },
        "err-code": {
          "version": "1.1.2",
          "bundled": true
        },
        "errno": {
          "version": "0.1.7",
          "bundled": true,
          "requires": {
            "prr": "~1.0.1"
          }
        },
        "es6-promise": {
          "version": "4.2.6",
          "bundled": true
        },
        "es6-promisify": {
          "version": "5.0.0",
          "bundled": true,
          "requires": {
            "es6-promise": "^4.0.3"
          }
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "bundled": true
        },
        "execa": {
          "version": "0.7.0",
          "bundled": true,
          "requires": {
            "cross-spawn": "^5.0.1",
            "get-stream": "^3.0.0",
            "is-stream": "^1.1.0",
            "npm-run-path": "^2.0.0",
            "p-finally": "^1.0.0",
            "signal-exit": "^3.0.0",
            "strip-eof": "^1.0.0"
          },
          "dependencies": {
            "get-stream": {
              "version": "3.0.0",
              "bundled": true
            }
          }
        },
        "extend": {
          "version": "3.0.2",
          "bundled": true
        },
        "extsprintf": {
          "version": "1.3.0",
          "bundled": true
        },
        "fast-deep-equal": {
          "version": "1.1.0",
          "bundled": true
        },
        "fast-json-stable-stringify": {
          "version": "2.0.0",
          "bundled": true
        },
        "figgy-pudding": {
          "version": "3.5.1",
          "bundled": true
        },
        "find-npm-prefix": {
          "version": "1.0.2",
          "bundled": true
        },
        "find-up": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "locate-path": "^2.0.0"
          }
        },
        "flush-write-stream": {
          "version": "1.0.3",
          "bundled": true,
          "requires": {
            "inherits": "^2.0.1",
            "readable-stream": "^2.0.4"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "forever-agent": {
          "version": "0.6.1",
          "bundled": true
        },
        "form-data": {
          "version": "2.3.2",
          "bundled": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "1.0.6",
            "mime-types": "^2.1.12"
          }
        },
        "from2": {
          "version": "2.3.0",
          "bundled": true,
          "requires": {
            "inherits": "^2.0.1",
            "readable-stream": "^2.0.0"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "fs-minipass": {
          "version": "1.2.5",
          "bundled": true,
          "requires": {
            "minipass": "^2.2.1"
          }
        },
        "fs-vacuum": {
          "version": "1.2.10",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "path-is-inside": "^1.0.1",
            "rimraf": "^2.5.2"
          }
        },
        "fs-write-stream-atomic": {
          "version": "1.0.10",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "iferr": "^0.1.5",
            "imurmurhash": "^0.1.4",
            "readable-stream": "1 || 2"
          },
          "dependencies": {
            "iferr": {
              "version": "0.1.5",
              "bundled": true
            },
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "fs.realpath": {
          "version": "1.0.0",
          "bundled": true
        },
        "fstream": {
          "version": "1.0.11",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "inherits": "~2.0.0",
            "mkdirp": ">=0.5 0",
            "rimraf": "2"
          }
        },
        "gauge": {
          "version": "2.7.4",
          "bundled": true,
          "requires": {
            "aproba": "^1.0.3",
            "console-control-strings": "^1.0.0",
            "has-unicode": "^2.0.0",
            "object-assign": "^4.1.0",
            "signal-exit": "^3.0.0",
            "string-width": "^1.0.1",
            "strip-ansi": "^3.0.1",
            "wide-align": "^1.1.0"
          },
          "dependencies": {
            "aproba": {
              "version": "1.2.0",
              "bundled": true
            },
            "string-width": {
              "version": "1.0.2",
              "bundled": true,
              "requires": {
                "code-point-at": "^1.0.0",
                "is-fullwidth-code-point": "^1.0.0",
                "strip-ansi": "^3.0.0"
              }
            }
          }
        },
        "genfun": {
          "version": "5.0.0",
          "bundled": true
        },
        "gentle-fs": {
          "version": "2.0.1",
          "bundled": true,
          "requires": {
            "aproba": "^1.1.2",
            "fs-vacuum": "^1.2.10",
            "graceful-fs": "^4.1.11",
            "iferr": "^0.1.5",
            "mkdirp": "^0.5.1",
            "path-is-inside": "^1.0.2",
            "read-cmd-shim": "^1.0.1",
            "slide": "^1.1.6"
          },
          "dependencies": {
            "aproba": {
              "version": "1.2.0",
              "bundled": true
            },
            "iferr": {
              "version": "0.1.5",
              "bundled": true
            }
          }
        },
        "get-caller-file": {
          "version": "1.0.2",
          "bundled": true
        },
        "get-stream": {
          "version": "4.1.0",
          "bundled": true,
          "requires": {
            "pump": "^3.0.0"
          }
        },
        "getpass": {
          "version": "0.1.7",
          "bundled": true,
          "requires": {
            "assert-plus": "^1.0.0"
          }
        },
        "glob": {
          "version": "7.1.3",
          "bundled": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        },
        "global-dirs": {
          "version": "0.1.1",
          "bundled": true,
          "requires": {
            "ini": "^1.3.4"
          }
        },
        "got": {
          "version": "6.7.1",
          "bundled": true,
          "requires": {
            "create-error-class": "^3.0.0",
            "duplexer3": "^0.1.4",
            "get-stream": "^3.0.0",
            "is-redirect": "^1.0.0",
            "is-retry-allowed": "^1.0.0",
            "is-stream": "^1.0.0",
            "lowercase-keys": "^1.0.0",
            "safe-buffer": "^5.0.1",
            "timed-out": "^4.0.0",
            "unzip-response": "^2.0.1",
            "url-parse-lax": "^1.0.0"
          },
          "dependencies": {
            "get-stream": {
              "version": "3.0.0",
              "bundled": true
            }
          }
        },
        "graceful-fs": {
          "version": "4.1.15",
          "bundled": true
        },
        "har-schema": {
          "version": "2.0.0",
          "bundled": true
        },
        "har-validator": {
          "version": "5.1.0",
          "bundled": true,
          "requires": {
            "ajv": "^5.3.0",
            "har-schema": "^2.0.0"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "bundled": true
        },
        "has-unicode": {
          "version": "2.0.1",
          "bundled": true
        },
        "hosted-git-info": {
          "version": "2.7.1",
          "bundled": true
        },
        "http-cache-semantics": {
          "version": "3.8.1",
          "bundled": true
        },
        "http-proxy-agent": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "agent-base": "4",
            "debug": "3.1.0"
          }
        },
        "http-signature": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "assert-plus": "^1.0.0",
            "jsprim": "^1.2.2",
            "sshpk": "^1.7.0"
          }
        },
        "https-proxy-agent": {
          "version": "2.2.1",
          "bundled": true,
          "requires": {
            "agent-base": "^4.1.0",
            "debug": "^3.1.0"
          }
        },
        "humanize-ms": {
          "version": "1.2.1",
          "bundled": true,
          "requires": {
            "ms": "^2.0.0"
          }
        },
        "iconv-lite": {
          "version": "0.4.23",
          "bundled": true,
          "requires": {
            "safer-buffer": ">= 2.1.2 < 3"
          }
        },
        "iferr": {
          "version": "1.0.2",
          "bundled": true
        },
        "ignore-walk": {
          "version": "3.0.1",
          "bundled": true,
          "requires": {
            "minimatch": "^3.0.4"
          }
        },
        "import-lazy": {
          "version": "2.1.0",
          "bundled": true
        },
        "imurmurhash": {
          "version": "0.1.4",
          "bundled": true
        },
        "inflight": {
          "version": "1.0.6",
          "bundled": true,
          "requires": {
            "once": "^1.3.0",
            "wrappy": "1"
          }
        },
        "inherits": {
          "version": "2.0.3",
          "bundled": true
        },
        "ini": {
          "version": "1.3.5",
          "bundled": true
        },
        "init-package-json": {
          "version": "1.10.3",
          "bundled": true,
          "requires": {
            "glob": "^7.1.1",
            "npm-package-arg": "^4.0.0 || ^5.0.0 || ^6.0.0",
            "promzard": "^0.3.0",
            "read": "~1.0.1",
            "read-package-json": "1 || 2",
            "semver": "2.x || 3.x || 4 || 5",
            "validate-npm-package-license": "^3.0.1",
            "validate-npm-package-name": "^3.0.0"
          }
        },
        "invert-kv": {
          "version": "1.0.0",
          "bundled": true
        },
        "ip": {
          "version": "1.1.5",
          "bundled": true
        },
        "ip-regex": {
          "version": "2.1.0",
          "bundled": true
        },
        "is-ci": {
          "version": "1.1.0",
          "bundled": true,
          "requires": {
            "ci-info": "^1.0.0"
          },
          "dependencies": {
            "ci-info": {
              "version": "1.6.0",
              "bundled": true
            }
          }
        },
        "is-cidr": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "cidr-regex": "^2.0.10"
          }
        },
        "is-fullwidth-code-point": {
          "version": "1.0.0",
          "bundled": true,
          "requires": {
            "number-is-nan": "^1.0.0"
          }
        },
        "is-installed-globally": {
          "version": "0.1.0",
          "bundled": true,
          "requires": {
            "global-dirs": "^0.1.0",
            "is-path-inside": "^1.0.0"
          }
        },
        "is-npm": {
          "version": "1.0.0",
          "bundled": true
        },
        "is-obj": {
          "version": "1.0.1",
          "bundled": true
        },
        "is-path-inside": {
          "version": "1.0.1",
          "bundled": true,
          "requires": {
            "path-is-inside": "^1.0.1"
          }
        },
        "is-redirect": {
          "version": "1.0.0",
          "bundled": true
        },
        "is-retry-allowed": {
          "version": "1.1.0",
          "bundled": true
        },
        "is-stream": {
          "version": "1.1.0",
          "bundled": true
        },
        "is-typedarray": {
          "version": "1.0.0",
          "bundled": true
        },
        "isarray": {
          "version": "1.0.0",
          "bundled": true
        },
        "isexe": {
          "version": "2.0.0",
          "bundled": true
        },
        "isstream": {
          "version": "0.1.2",
          "bundled": true
        },
        "jsbn": {
          "version": "0.1.1",
          "bundled": true,
          "optional": true
        },
        "json-parse-better-errors": {
          "version": "1.0.2",
          "bundled": true
        },
        "json-schema": {
          "version": "0.2.3",
          "bundled": true
        },
        "json-schema-traverse": {
          "version": "0.3.1",
          "bundled": true
        },
        "json-stringify-safe": {
          "version": "5.0.1",
          "bundled": true
        },
        "jsonparse": {
          "version": "1.3.1",
          "bundled": true
        },
        "jsprim": {
          "version": "1.4.1",
          "bundled": true,
          "requires": {
            "assert-plus": "1.0.0",
            "extsprintf": "1.3.0",
            "json-schema": "0.2.3",
            "verror": "1.10.0"
          }
        },
        "latest-version": {
          "version": "3.1.0",
          "bundled": true,
          "requires": {
            "package-json": "^4.0.0"
          }
        },
        "lazy-property": {
          "version": "1.0.0",
          "bundled": true
        },
        "lcid": {
          "version": "1.0.0",
          "bundled": true,
          "requires": {
            "invert-kv": "^1.0.0"
          }
        },
        "libcipm": {
          "version": "3.0.3",
          "bundled": true,
          "requires": {
            "bin-links": "^1.1.2",
            "bluebird": "^3.5.1",
            "figgy-pudding": "^3.5.1",
            "find-npm-prefix": "^1.0.2",
            "graceful-fs": "^4.1.11",
            "ini": "^1.3.5",
            "lock-verify": "^2.0.2",
            "mkdirp": "^0.5.1",
            "npm-lifecycle": "^2.0.3",
            "npm-logical-tree": "^1.2.1",
            "npm-package-arg": "^6.1.0",
            "pacote": "^9.1.0",
            "read-package-json": "^2.0.13",
            "rimraf": "^2.6.2",
            "worker-farm": "^1.6.0"
          }
        },
        "libnpm": {
          "version": "2.0.1",
          "bundled": true,
          "requires": {
            "bin-links": "^1.1.2",
            "bluebird": "^3.5.3",
            "find-npm-prefix": "^1.0.2",
            "libnpmaccess": "^3.0.1",
            "libnpmconfig": "^1.2.1",
            "libnpmhook": "^5.0.2",
            "libnpmorg": "^1.0.0",
            "libnpmpublish": "^1.1.0",
            "libnpmsearch": "^2.0.0",
            "libnpmteam": "^1.0.1",
            "lock-verify": "^2.0.2",
            "npm-lifecycle": "^2.1.0",
            "npm-logical-tree": "^1.2.1",
            "npm-package-arg": "^6.1.0",
            "npm-profile": "^4.0.1",
            "npm-registry-fetch": "^3.8.0",
            "npmlog": "^4.1.2",
            "pacote": "^9.2.3",
            "read-package-json": "^2.0.13",
            "stringify-package": "^1.0.0"
          }
        },
        "libnpmaccess": {
          "version": "3.0.1",
          "bundled": true,
          "requires": {
            "aproba": "^2.0.0",
            "get-stream": "^4.0.0",
            "npm-package-arg": "^6.1.0",
            "npm-registry-fetch": "^3.8.0"
          },
          "dependencies": {
            "aproba": {
              "version": "2.0.0",
              "bundled": true
            }
          }
        },
        "libnpmconfig": {
          "version": "1.2.1",
          "bundled": true,
          "requires": {
            "figgy-pudding": "^3.5.1",
            "find-up": "^3.0.0",
            "ini": "^1.3.5"
          },
          "dependencies": {
            "find-up": {
              "version": "3.0.0",
              "bundled": true,
              "requires": {
                "locate-path": "^3.0.0"
              }
            },
            "locate-path": {
              "version": "3.0.0",
              "bundled": true,
              "requires": {
                "p-locate": "^3.0.0",
                "path-exists": "^3.0.0"
              }
            },
            "p-limit": {
              "version": "2.1.0",
              "bundled": true,
              "requires": {
                "p-try": "^2.0.0"
              }
            },
            "p-locate": {
              "version": "3.0.0",
              "bundled": true,
              "requires": {
                "p-limit": "^2.0.0"
              }
            },
            "p-try": {
              "version": "2.0.0",
              "bundled": true
            }
          }
        },
        "libnpmhook": {
          "version": "5.0.2",
          "bundled": true,
          "requires": {
            "aproba": "^2.0.0",
            "figgy-pudding": "^3.4.1",
            "get-stream": "^4.0.0",
            "npm-registry-fetch": "^3.8.0"
          }
        },
        "libnpmorg": {
          "version": "1.0.0",
          "bundled": true,
          "requires": {
            "aproba": "^2.0.0",
            "figgy-pudding": "^3.4.1",
            "get-stream": "^4.0.0",
            "npm-registry-fetch": "^3.8.0"
          },
          "dependencies": {
            "aproba": {
              "version": "2.0.0",
              "bundled": true
            }
          }
        },
        "libnpmpublish": {
          "version": "1.1.1",
          "bundled": true,
          "requires": {
            "aproba": "^2.0.0",
            "figgy-pudding": "^3.5.1",
            "get-stream": "^4.0.0",
            "lodash.clonedeep": "^4.5.0",
            "normalize-package-data": "^2.4.0",
            "npm-package-arg": "^6.1.0",
            "npm-registry-fetch": "^3.8.0",
            "semver": "^5.5.1",
            "ssri": "^6.0.1"
          }
        },
        "libnpmsearch": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "figgy-pudding": "^3.5.1",
            "get-stream": "^4.0.0",
            "npm-registry-fetch": "^3.8.0"
          }
        },
        "libnpmteam": {
          "version": "1.0.1",
          "bundled": true,
          "requires": {
            "aproba": "^2.0.0",
            "figgy-pudding": "^3.4.1",
            "get-stream": "^4.0.0",
            "npm-registry-fetch": "^3.8.0"
          },
          "dependencies": {
            "aproba": {
              "version": "2.0.0",
              "bundled": true
            }
          }
        },
        "libnpx": {
          "version": "10.2.0",
          "bundled": true,
          "requires": {
            "dotenv": "^5.0.1",
            "npm-package-arg": "^6.0.0",
            "rimraf": "^2.6.2",
            "safe-buffer": "^5.1.0",
            "update-notifier": "^2.3.0",
            "which": "^1.3.0",
            "y18n": "^4.0.0",
            "yargs": "^11.0.0"
          }
        },
        "locate-path": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "p-locate": "^2.0.0",
            "path-exists": "^3.0.0"
          }
        },
        "lock-verify": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "npm-package-arg": "^6.1.0",
            "semver": "^5.4.1"
          }
        },
        "lockfile": {
          "version": "1.0.4",
          "bundled": true,
          "requires": {
            "signal-exit": "^3.0.2"
          }
        },
        "lodash._baseindexof": {
          "version": "3.1.0",
          "bundled": true
        },
        "lodash._baseuniq": {
          "version": "4.6.0",
          "bundled": true,
          "requires": {
            "lodash._createset": "~4.0.0",
            "lodash._root": "~3.0.0"
          }
        },
        "lodash._bindcallback": {
          "version": "3.0.1",
          "bundled": true
        },
        "lodash._cacheindexof": {
          "version": "3.0.2",
          "bundled": true
        },
        "lodash._createcache": {
          "version": "3.1.2",
          "bundled": true,
          "requires": {
            "lodash._getnative": "^3.0.0"
          }
        },
        "lodash._createset": {
          "version": "4.0.3",
          "bundled": true
        },
        "lodash._getnative": {
          "version": "3.9.1",
          "bundled": true
        },
        "lodash._root": {
          "version": "3.0.1",
          "bundled": true
        },
        "lodash.clonedeep": {
          "version": "4.5.0",
          "bundled": true
        },
        "lodash.restparam": {
          "version": "3.6.1",
          "bundled": true
        },
        "lodash.union": {
          "version": "4.6.0",
          "bundled": true
        },
        "lodash.uniq": {
          "version": "4.5.0",
          "bundled": true
        },
        "lodash.without": {
          "version": "4.4.0",
          "bundled": true
        },
        "lowercase-keys": {
          "version": "1.0.1",
          "bundled": true
        },
        "lru-cache": {
          "version": "4.1.5",
          "bundled": true,
          "requires": {
            "pseudomap": "^1.0.2",
            "yallist": "^2.1.2"
          }
        },
        "make-dir": {
          "version": "1.3.0",
          "bundled": true,
          "requires": {
            "pify": "^3.0.0"
          }
        },
        "make-fetch-happen": {
          "version": "4.0.1",
          "bundled": true,
          "requires": {
            "agentkeepalive": "^3.4.1",
            "cacache": "^11.0.1",
            "http-cache-semantics": "^3.8.1",
            "http-proxy-agent": "^2.1.0",
            "https-proxy-agent": "^2.2.1",
            "lru-cache": "^4.1.2",
            "mississippi": "^3.0.0",
            "node-fetch-npm": "^2.0.2",
            "promise-retry": "^1.1.1",
            "socks-proxy-agent": "^4.0.0",
            "ssri": "^6.0.0"
          }
        },
        "meant": {
          "version": "1.0.1",
          "bundled": true
        },
        "mem": {
          "version": "1.1.0",
          "bundled": true,
          "requires": {
            "mimic-fn": "^1.0.0"
          }
        },
        "mime-db": {
          "version": "1.35.0",
          "bundled": true
        },
        "mime-types": {
          "version": "2.1.19",
          "bundled": true,
          "requires": {
            "mime-db": "~1.35.0"
          }
        },
        "mimic-fn": {
          "version": "1.2.0",
          "bundled": true
        },
        "minimatch": {
          "version": "3.0.4",
          "bundled": true,
          "requires": {
            "brace-expansion": "^1.1.7"
          }
        },
        "minimist": {
          "version": "0.0.8",
          "bundled": true
        },
        "minipass": {
          "version": "2.3.3",
          "bundled": true,
          "requires": {
            "safe-buffer": "^5.1.2",
            "yallist": "^3.0.0"
          },
          "dependencies": {
            "yallist": {
              "version": "3.0.2",
              "bundled": true
            }
          }
        },
        "minizlib": {
          "version": "1.1.1",
          "bundled": true,
          "requires": {
            "minipass": "^2.2.1"
          }
        },
        "mississippi": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "concat-stream": "^1.5.0",
            "duplexify": "^3.4.2",
            "end-of-stream": "^1.1.0",
            "flush-write-stream": "^1.0.0",
            "from2": "^2.1.0",
            "parallel-transform": "^1.1.0",
            "pump": "^3.0.0",
            "pumpify": "^1.3.3",
            "stream-each": "^1.1.0",
            "through2": "^2.0.0"
          }
        },
        "mkdirp": {
          "version": "0.5.1",
          "bundled": true,
          "requires": {
            "minimist": "0.0.8"
          }
        },
        "move-concurrently": {
          "version": "1.0.1",
          "bundled": true,
          "requires": {
            "aproba": "^1.1.1",
            "copy-concurrently": "^1.0.0",
            "fs-write-stream-atomic": "^1.0.8",
            "mkdirp": "^0.5.1",
            "rimraf": "^2.5.4",
            "run-queue": "^1.0.3"
          },
          "dependencies": {
            "aproba": {
              "version": "1.2.0",
              "bundled": true
            }
          }
        },
        "ms": {
          "version": "2.1.1",
          "bundled": true
        },
        "mute-stream": {
          "version": "0.0.7",
          "bundled": true
        },
        "node-fetch-npm": {
          "version": "2.0.2",
          "bundled": true,
          "requires": {
            "encoding": "^0.1.11",
            "json-parse-better-errors": "^1.0.0",
            "safe-buffer": "^5.1.1"
          }
        },
        "node-gyp": {
          "version": "3.8.0",
          "bundled": true,
          "requires": {
            "fstream": "^1.0.0",
            "glob": "^7.0.3",
            "graceful-fs": "^4.1.2",
            "mkdirp": "^0.5.0",
            "nopt": "2 || 3",
            "npmlog": "0 || 1 || 2 || 3 || 4",
            "osenv": "0",
            "request": "^2.87.0",
            "rimraf": "2",
            "semver": "~5.3.0",
            "tar": "^2.0.0",
            "which": "1"
          },
          "dependencies": {
            "nopt": {
              "version": "3.0.6",
              "bundled": true,
              "requires": {
                "abbrev": "1"
              }
            },
            "semver": {
              "version": "5.3.0",
              "bundled": true
            },
            "tar": {
              "version": "2.2.1",
              "bundled": true,
              "requires": {
                "block-stream": "*",
                "fstream": "^1.0.2",
                "inherits": "2"
              }
            }
          }
        },
        "nopt": {
          "version": "4.0.1",
          "bundled": true,
          "requires": {
            "abbrev": "1",
            "osenv": "^0.1.4"
          }
        },
        "normalize-package-data": {
          "version": "2.5.0",
          "bundled": true,
          "requires": {
            "hosted-git-info": "^2.1.4",
            "resolve": "^1.10.0",
            "semver": "2 || 3 || 4 || 5",
            "validate-npm-package-license": "^3.0.1"
          },
          "dependencies": {
            "resolve": {
              "version": "1.10.0",
              "bundled": true,
              "requires": {
                "path-parse": "^1.0.6"
              }
            }
          }
        },
        "npm-audit-report": {
          "version": "1.3.2",
          "bundled": true,
          "requires": {
            "cli-table3": "^0.5.0",
            "console-control-strings": "^1.1.0"
          }
        },
        "npm-bundled": {
          "version": "1.0.6",
          "bundled": true
        },
        "npm-cache-filename": {
          "version": "1.0.2",
          "bundled": true
        },
        "npm-install-checks": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "semver": "^2.3.0 || 3.x || 4 || 5"
          }
        },
        "npm-lifecycle": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "byline": "^5.0.0",
            "graceful-fs": "^4.1.11",
            "node-gyp": "^3.8.0",
            "resolve-from": "^4.0.0",
            "slide": "^1.1.6",
            "uid-number": "0.0.6",
            "umask": "^1.1.0",
            "which": "^1.3.1"
          }
        },
        "npm-logical-tree": {
          "version": "1.2.1",
          "bundled": true
        },
        "npm-package-arg": {
          "version": "6.1.0",
          "bundled": true,
          "requires": {
            "hosted-git-info": "^2.6.0",
            "osenv": "^0.1.5",
            "semver": "^5.5.0",
            "validate-npm-package-name": "^3.0.0"
          }
        },
        "npm-packlist": {
          "version": "1.4.1",
          "bundled": true,
          "requires": {
            "ignore-walk": "^3.0.1",
            "npm-bundled": "^1.0.1"
          }
        },
        "npm-pick-manifest": {
          "version": "2.2.3",
          "bundled": true,
          "requires": {
            "figgy-pudding": "^3.5.1",
            "npm-package-arg": "^6.0.0",
            "semver": "^5.4.1"
          }
        },
        "npm-profile": {
          "version": "4.0.1",
          "bundled": true,
          "requires": {
            "aproba": "^1.1.2 || 2",
            "figgy-pudding": "^3.4.1",
            "npm-registry-fetch": "^3.8.0"
          }
        },
        "npm-registry-fetch": {
          "version": "3.9.0",
          "bundled": true,
          "requires": {
            "JSONStream": "^1.3.4",
            "bluebird": "^3.5.1",
            "figgy-pudding": "^3.4.1",
            "lru-cache": "^4.1.3",
            "make-fetch-happen": "^4.0.1",
            "npm-package-arg": "^6.1.0"
          }
        },
        "npm-run-path": {
          "version": "2.0.2",
          "bundled": true,
          "requires": {
            "path-key": "^2.0.0"
          }
        },
        "npm-user-validate": {
          "version": "1.0.0",
          "bundled": true
        },
        "npmlog": {
          "version": "4.1.2",
          "bundled": true,
          "requires": {
            "are-we-there-yet": "~1.1.2",
            "console-control-strings": "~1.1.0",
            "gauge": "~2.7.3",
            "set-blocking": "~2.0.0"
          }
        },
        "number-is-nan": {
          "version": "1.0.1",
          "bundled": true
        },
        "oauth-sign": {
          "version": "0.9.0",
          "bundled": true
        },
        "object-assign": {
          "version": "4.1.1",
          "bundled": true
        },
        "once": {
          "version": "1.4.0",
          "bundled": true,
          "requires": {
            "wrappy": "1"
          }
        },
        "opener": {
          "version": "1.5.1",
          "bundled": true
        },
        "os-homedir": {
          "version": "1.0.2",
          "bundled": true
        },
        "os-locale": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "execa": "^0.7.0",
            "lcid": "^1.0.0",
            "mem": "^1.1.0"
          }
        },
        "os-tmpdir": {
          "version": "1.0.2",
          "bundled": true
        },
        "osenv": {
          "version": "0.1.5",
          "bundled": true,
          "requires": {
            "os-homedir": "^1.0.0",
            "os-tmpdir": "^1.0.0"
          }
        },
        "p-finally": {
          "version": "1.0.0",
          "bundled": true
        },
        "p-limit": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "p-try": "^1.0.0"
          }
        },
        "p-locate": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "p-limit": "^1.1.0"
          }
        },
        "p-try": {
          "version": "1.0.0",
          "bundled": true
        },
        "package-json": {
          "version": "4.0.1",
          "bundled": true,
          "requires": {
            "got": "^6.7.1",
            "registry-auth-token": "^3.0.1",
            "registry-url": "^3.0.3",
            "semver": "^5.1.0"
          }
        },
        "pacote": {
          "version": "9.5.0",
          "bundled": true,
          "requires": {
            "bluebird": "^3.5.3",
            "cacache": "^11.3.2",
            "figgy-pudding": "^3.5.1",
            "get-stream": "^4.1.0",
            "glob": "^7.1.3",
            "lru-cache": "^5.1.1",
            "make-fetch-happen": "^4.0.1",
            "minimatch": "^3.0.4",
            "minipass": "^2.3.5",
            "mississippi": "^3.0.0",
            "mkdirp": "^0.5.1",
            "normalize-package-data": "^2.4.0",
            "npm-package-arg": "^6.1.0",
            "npm-packlist": "^1.1.12",
            "npm-pick-manifest": "^2.2.3",
            "npm-registry-fetch": "^3.8.0",
            "osenv": "^0.1.5",
            "promise-inflight": "^1.0.1",
            "promise-retry": "^1.1.1",
            "protoduck": "^5.0.1",
            "rimraf": "^2.6.2",
            "safe-buffer": "^5.1.2",
            "semver": "^5.6.0",
            "ssri": "^6.0.1",
            "tar": "^4.4.8",
            "unique-filename": "^1.1.1",
            "which": "^1.3.1"
          },
          "dependencies": {
            "lru-cache": {
              "version": "5.1.1",
              "bundled": true,
              "requires": {
                "yallist": "^3.0.2"
              }
            },
            "minipass": {
              "version": "2.3.5",
              "bundled": true,
              "requires": {
                "safe-buffer": "^5.1.2",
                "yallist": "^3.0.0"
              }
            },
            "yallist": {
              "version": "3.0.3",
              "bundled": true
            }
          }
        },
        "parallel-transform": {
          "version": "1.1.0",
          "bundled": true,
          "requires": {
            "cyclist": "~0.2.2",
            "inherits": "^2.0.3",
            "readable-stream": "^2.1.5"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "path-exists": {
          "version": "3.0.0",
          "bundled": true
        },
        "path-is-absolute": {
          "version": "1.0.1",
          "bundled": true
        },
        "path-is-inside": {
          "version": "1.0.2",
          "bundled": true
        },
        "path-key": {
          "version": "2.0.1",
          "bundled": true
        },
        "path-parse": {
          "version": "1.0.6",
          "bundled": true
        },
        "performance-now": {
          "version": "2.1.0",
          "bundled": true
        },
        "pify": {
          "version": "3.0.0",
          "bundled": true
        },
        "prepend-http": {
          "version": "1.0.4",
          "bundled": true
        },
        "process-nextick-args": {
          "version": "2.0.0",
          "bundled": true
        },
        "promise-inflight": {
          "version": "1.0.1",
          "bundled": true
        },
        "promise-retry": {
          "version": "1.1.1",
          "bundled": true,
          "requires": {
            "err-code": "^1.0.0",
            "retry": "^0.10.0"
          },
          "dependencies": {
            "retry": {
              "version": "0.10.1",
              "bundled": true
            }
          }
        },
        "promzard": {
          "version": "0.3.0",
          "bundled": true,
          "requires": {
            "read": "1"
          }
        },
        "proto-list": {
          "version": "1.2.4",
          "bundled": true
        },
        "protoduck": {
          "version": "5.0.1",
          "bundled": true,
          "requires": {
            "genfun": "^5.0.0"
          }
        },
        "prr": {
          "version": "1.0.1",
          "bundled": true
        },
        "pseudomap": {
          "version": "1.0.2",
          "bundled": true
        },
        "psl": {
          "version": "1.1.29",
          "bundled": true
        },
        "pump": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "end-of-stream": "^1.1.0",
            "once": "^1.3.1"
          }
        },
        "pumpify": {
          "version": "1.5.1",
          "bundled": true,
          "requires": {
            "duplexify": "^3.6.0",
            "inherits": "^2.0.3",
            "pump": "^2.0.0"
          },
          "dependencies": {
            "pump": {
              "version": "2.0.1",
              "bundled": true,
              "requires": {
                "end-of-stream": "^1.1.0",
                "once": "^1.3.1"
              }
            }
          }
        },
        "punycode": {
          "version": "1.4.1",
          "bundled": true
        },
        "qrcode-terminal": {
          "version": "0.12.0",
          "bundled": true
        },
        "qs": {
          "version": "6.5.2",
          "bundled": true
        },
        "query-string": {
          "version": "6.2.0",
          "bundled": true,
          "requires": {
            "decode-uri-component": "^0.2.0",
            "strict-uri-encode": "^2.0.0"
          }
        },
        "qw": {
          "version": "1.0.1",
          "bundled": true
        },
        "rc": {
          "version": "1.2.7",
          "bundled": true,
          "requires": {
            "deep-extend": "^0.5.1",
            "ini": "~1.3.0",
            "minimist": "^1.2.0",
            "strip-json-comments": "~2.0.1"
          },
          "dependencies": {
            "minimist": {
              "version": "1.2.0",
              "bundled": true
            }
          }
        },
        "read": {
          "version": "1.0.7",
          "bundled": true,
          "requires": {
            "mute-stream": "~0.0.4"
          }
        },
        "read-cmd-shim": {
          "version": "1.0.1",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2"
          }
        },
        "read-installed": {
          "version": "4.0.3",
          "bundled": true,
          "requires": {
            "debuglog": "^1.0.1",
            "graceful-fs": "^4.1.2",
            "read-package-json": "^2.0.0",
            "readdir-scoped-modules": "^1.0.0",
            "semver": "2 || 3 || 4 || 5",
            "slide": "~1.1.3",
            "util-extend": "^1.0.1"
          }
        },
        "read-package-json": {
          "version": "2.0.13",
          "bundled": true,
          "requires": {
            "glob": "^7.1.1",
            "graceful-fs": "^4.1.2",
            "json-parse-better-errors": "^1.0.1",
            "normalize-package-data": "^2.0.0",
            "slash": "^1.0.0"
          }
        },
        "read-package-tree": {
          "version": "5.2.2",
          "bundled": true,
          "requires": {
            "debuglog": "^1.0.1",
            "dezalgo": "^1.0.0",
            "once": "^1.3.0",
            "read-package-json": "^2.0.0",
            "readdir-scoped-modules": "^1.0.0"
          }
        },
        "readable-stream": {
          "version": "3.1.1",
          "bundled": true,
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        },
        "readdir-scoped-modules": {
          "version": "1.0.2",
          "bundled": true,
          "requires": {
            "debuglog": "^1.0.1",
            "dezalgo": "^1.0.0",
            "graceful-fs": "^4.1.2",
            "once": "^1.3.0"
          }
        },
        "registry-auth-token": {
          "version": "3.3.2",
          "bundled": true,
          "requires": {
            "rc": "^1.1.6",
            "safe-buffer": "^5.0.1"
          }
        },
        "registry-url": {
          "version": "3.1.0",
          "bundled": true,
          "requires": {
            "rc": "^1.0.1"
          }
        },
        "request": {
          "version": "2.88.0",
          "bundled": true,
          "requires": {
            "aws-sign2": "~0.7.0",
            "aws4": "^1.8.0",
            "caseless": "~0.12.0",
            "combined-stream": "~1.0.6",
            "extend": "~3.0.2",
            "forever-agent": "~0.6.1",
            "form-data": "~2.3.2",
            "har-validator": "~5.1.0",
            "http-signature": "~1.2.0",
            "is-typedarray": "~1.0.0",
            "isstream": "~0.1.2",
            "json-stringify-safe": "~5.0.1",
            "mime-types": "~2.1.19",
            "oauth-sign": "~0.9.0",
            "performance-now": "^2.1.0",
            "qs": "~6.5.2",
            "safe-buffer": "^5.1.2",
            "tough-cookie": "~2.4.3",
            "tunnel-agent": "^0.6.0",
            "uuid": "^3.3.2"
          }
        },
        "require-directory": {
          "version": "2.1.1",
          "bundled": true
        },
        "require-main-filename": {
          "version": "1.0.1",
          "bundled": true
        },
        "resolve-from": {
          "version": "4.0.0",
          "bundled": true
        },
        "retry": {
          "version": "0.12.0",
          "bundled": true
        },
        "rimraf": {
          "version": "2.6.3",
          "bundled": true,
          "requires": {
            "glob": "^7.1.3"
          }
        },
        "run-queue": {
          "version": "1.0.3",
          "bundled": true,
          "requires": {
            "aproba": "^1.1.1"
          },
          "dependencies": {
            "aproba": {
              "version": "1.2.0",
              "bundled": true
            }
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "bundled": true
        },
        "safer-buffer": {
          "version": "2.1.2",
          "bundled": true
        },
        "semver": {
          "version": "5.6.0",
          "bundled": true
        },
        "semver-diff": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "semver": "^5.0.3"
          }
        },
        "set-blocking": {
          "version": "2.0.0",
          "bundled": true
        },
        "sha": {
          "version": "2.0.1",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "readable-stream": "^2.0.2"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "shebang-command": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "shebang-regex": "^1.0.0"
          }
        },
        "shebang-regex": {
          "version": "1.0.0",
          "bundled": true
        },
        "signal-exit": {
          "version": "3.0.2",
          "bundled": true
        },
        "slash": {
          "version": "1.0.0",
          "bundled": true
        },
        "slide": {
          "version": "1.1.6",
          "bundled": true
        },
        "smart-buffer": {
          "version": "4.0.1",
          "bundled": true
        },
        "socks": {
          "version": "2.2.0",
          "bundled": true,
          "requires": {
            "ip": "^1.1.5",
            "smart-buffer": "^4.0.1"
          }
        },
        "socks-proxy-agent": {
          "version": "4.0.1",
          "bundled": true,
          "requires": {
            "agent-base": "~4.2.0",
            "socks": "~2.2.0"
          }
        },
        "sorted-object": {
          "version": "2.0.1",
          "bundled": true
        },
        "sorted-union-stream": {
          "version": "2.1.3",
          "bundled": true,
          "requires": {
            "from2": "^1.3.0",
            "stream-iterate": "^1.1.0"
          },
          "dependencies": {
            "from2": {
              "version": "1.3.0",
              "bundled": true,
              "requires": {
                "inherits": "~2.0.1",
                "readable-stream": "~1.1.10"
              }
            },
            "isarray": {
              "version": "0.0.1",
              "bundled": true
            },
            "readable-stream": {
              "version": "1.1.14",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.1",
                "isarray": "0.0.1",
                "string_decoder": "~0.10.x"
              }
            },
            "string_decoder": {
              "version": "0.10.31",
              "bundled": true
            }
          }
        },
        "spdx-correct": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "spdx-expression-parse": "^3.0.0",
            "spdx-license-ids": "^3.0.0"
          }
        },
        "spdx-exceptions": {
          "version": "2.1.0",
          "bundled": true
        },
        "spdx-expression-parse": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "spdx-exceptions": "^2.1.0",
            "spdx-license-ids": "^3.0.0"
          }
        },
        "spdx-license-ids": {
          "version": "3.0.3",
          "bundled": true
        },
        "sshpk": {
          "version": "1.14.2",
          "bundled": true,
          "requires": {
            "asn1": "~0.2.3",
            "assert-plus": "^1.0.0",
            "bcrypt-pbkdf": "^1.0.0",
            "dashdash": "^1.12.0",
            "ecc-jsbn": "~0.1.1",
            "getpass": "^0.1.1",
            "jsbn": "~0.1.0",
            "safer-buffer": "^2.0.2",
            "tweetnacl": "~0.14.0"
          }
        },
        "ssri": {
          "version": "6.0.1",
          "bundled": true,
          "requires": {
            "figgy-pudding": "^3.5.1"
          }
        },
        "stream-each": {
          "version": "1.2.2",
          "bundled": true,
          "requires": {
            "end-of-stream": "^1.1.0",
            "stream-shift": "^1.0.0"
          }
        },
        "stream-iterate": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "readable-stream": "^2.1.5",
            "stream-shift": "^1.0.0"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "stream-shift": {
          "version": "1.0.0",
          "bundled": true
        },
        "strict-uri-encode": {
          "version": "2.0.0",
          "bundled": true
        },
        "string-width": {
          "version": "2.1.1",
          "bundled": true,
          "requires": {
            "is-fullwidth-code-point": "^2.0.0",
            "strip-ansi": "^4.0.0"
          },
          "dependencies": {
            "ansi-regex": {
              "version": "3.0.0",
              "bundled": true
            },
            "is-fullwidth-code-point": {
              "version": "2.0.0",
              "bundled": true
            },
            "strip-ansi": {
              "version": "4.0.0",
              "bundled": true,
              "requires": {
                "ansi-regex": "^3.0.0"
              }
            }
          }
        },
        "string_decoder": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        },
        "stringify-package": {
          "version": "1.0.0",
          "bundled": true
        },
        "strip-ansi": {
          "version": "3.0.1",
          "bundled": true,
          "requires": {
            "ansi-regex": "^2.0.0"
          }
        },
        "strip-eof": {
          "version": "1.0.0",
          "bundled": true
        },
        "strip-json-comments": {
          "version": "2.0.1",
          "bundled": true
        },
        "supports-color": {
          "version": "5.4.0",
          "bundled": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        },
        "tar": {
          "version": "4.4.8",
          "bundled": true,
          "requires": {
            "chownr": "^1.1.1",
            "fs-minipass": "^1.2.5",
            "minipass": "^2.3.4",
            "minizlib": "^1.1.1",
            "mkdirp": "^0.5.0",
            "safe-buffer": "^5.1.2",
            "yallist": "^3.0.2"
          },
          "dependencies": {
            "chownr": {
              "version": "1.1.1",
              "bundled": true
            },
            "minipass": {
              "version": "2.3.5",
              "bundled": true,
              "requires": {
                "safe-buffer": "^5.1.2",
                "yallist": "^3.0.0"
              }
            },
            "yallist": {
              "version": "3.0.3",
              "bundled": true
            }
          }
        },
        "term-size": {
          "version": "1.2.0",
          "bundled": true,
          "requires": {
            "execa": "^0.7.0"
          }
        },
        "text-table": {
          "version": "0.2.0",
          "bundled": true
        },
        "through": {
          "version": "2.3.8",
          "bundled": true
        },
        "through2": {
          "version": "2.0.3",
          "bundled": true,
          "requires": {
            "readable-stream": "^2.1.5",
            "xtend": "~4.0.1"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.6",
              "bundled": true,
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            },
            "string_decoder": {
              "version": "1.1.1",
              "bundled": true,
              "requires": {
                "safe-buffer": "~5.1.0"
              }
            }
          }
        },
        "timed-out": {
          "version": "4.0.1",
          "bundled": true
        },
        "tiny-relative-date": {
          "version": "1.3.0",
          "bundled": true
        },
        "tough-cookie": {
          "version": "2.4.3",
          "bundled": true,
          "requires": {
            "psl": "^1.1.24",
            "punycode": "^1.4.1"
          }
        },
        "tunnel-agent": {
          "version": "0.6.0",
          "bundled": true,
          "requires": {
            "safe-buffer": "^5.0.1"
          }
        },
        "tweetnacl": {
          "version": "0.14.5",
          "bundled": true,
          "optional": true
        },
        "typedarray": {
          "version": "0.0.6",
          "bundled": true
        },
        "uid-number": {
          "version": "0.0.6",
          "bundled": true
        },
        "umask": {
          "version": "1.1.0",
          "bundled": true
        },
        "unique-filename": {
          "version": "1.1.1",
          "bundled": true,
          "requires": {
            "unique-slug": "^2.0.0"
          }
        },
        "unique-slug": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "imurmurhash": "^0.1.4"
          }
        },
        "unique-string": {
          "version": "1.0.0",
          "bundled": true,
          "requires": {
            "crypto-random-string": "^1.0.0"
          }
        },
        "unpipe": {
          "version": "1.0.0",
          "bundled": true
        },
        "unzip-response": {
          "version": "2.0.1",
          "bundled": true
        },
        "update-notifier": {
          "version": "2.5.0",
          "bundled": true,
          "requires": {
            "boxen": "^1.2.1",
            "chalk": "^2.0.1",
            "configstore": "^3.0.0",
            "import-lazy": "^2.1.0",
            "is-ci": "^1.0.10",
            "is-installed-globally": "^0.1.0",
            "is-npm": "^1.0.0",
            "latest-version": "^3.0.0",
            "semver-diff": "^2.0.0",
            "xdg-basedir": "^3.0.0"
          }
        },
        "url-parse-lax": {
          "version": "1.0.0",
          "bundled": true,
          "requires": {
            "prepend-http": "^1.0.1"
          }
        },
        "util-deprecate": {
          "version": "1.0.2",
          "bundled": true
        },
        "util-extend": {
          "version": "1.0.3",
          "bundled": true
        },
        "uuid": {
          "version": "3.3.2",
          "bundled": true
        },
        "validate-npm-package-license": {
          "version": "3.0.4",
          "bundled": true,
          "requires": {
            "spdx-correct": "^3.0.0",
            "spdx-expression-parse": "^3.0.0"
          }
        },
        "validate-npm-package-name": {
          "version": "3.0.0",
          "bundled": true,
          "requires": {
            "builtins": "^1.0.3"
          }
        },
        "verror": {
          "version": "1.10.0",
          "bundled": true,
          "requires": {
            "assert-plus": "^1.0.0",
            "core-util-is": "1.0.2",
            "extsprintf": "^1.2.0"
          }
        },
        "wcwidth": {
          "version": "1.0.1",
          "bundled": true,
          "requires": {
            "defaults": "^1.0.3"
          }
        },
        "which": {
          "version": "1.3.1",
          "bundled": true,
          "requires": {
            "isexe": "^2.0.0"
          }
        },
        "which-module": {
          "version": "2.0.0",
          "bundled": true
        },
        "wide-align": {
          "version": "1.1.2",
          "bundled": true,
          "requires": {
            "string-width": "^1.0.2"
          },
          "dependencies": {
            "string-width": {
              "version": "1.0.2",
              "bundled": true,
              "requires": {
                "code-point-at": "^1.0.0",
                "is-fullwidth-code-point": "^1.0.0",
                "strip-ansi": "^3.0.0"
              }
            }
          }
        },
        "widest-line": {
          "version": "2.0.0",
          "bundled": true,
          "requires": {
            "string-width": "^2.1.1"
          }
        },
        "worker-farm": {
          "version": "1.6.0",
          "bundled": true,
          "requires": {
            "errno": "~0.1.7"
          }
        },
        "wrap-ansi": {
          "version": "2.1.0",
          "bundled": true,
          "requires": {
            "string-width": "^1.0.1",
            "strip-ansi": "^3.0.1"
          },
          "dependencies": {
            "string-width": {
              "version": "1.0.2",
              "bundled": true,
              "requires": {
                "code-point-at": "^1.0.0",
                "is-fullwidth-code-point": "^1.0.0",
                "strip-ansi": "^3.0.0"
              }
            }
          }
        },
        "wrappy": {
          "version": "1.0.2",
          "bundled": true
        },
        "write-file-atomic": {
          "version": "2.4.2",
          "bundled": true,
          "requires": {
            "graceful-fs": "^4.1.11",
            "imurmurhash": "^0.1.4",
            "signal-exit": "^3.0.2"
          }
        },
        "xdg-basedir": {
          "version": "3.0.0",
          "bundled": true
        },
        "xtend": {
          "version": "4.0.1",
          "bundled": true
        },
        "y18n": {
          "version": "4.0.0",
          "bundled": true
        },
        "yallist": {
          "version": "2.1.2",
          "bundled": true
        },
        "yargs": {
          "version": "11.0.0",
          "bundled": true,
          "requires": {
            "cliui": "^4.0.0",
            "decamelize": "^1.1.1",
            "find-up": "^2.1.0",
            "get-caller-file": "^1.0.1",
            "os-locale": "^2.0.0",
            "require-directory": "^2.1.1",
            "require-main-filename": "^1.0.1",
            "set-blocking": "^2.0.0",
            "string-width": "^2.0.0",
            "which-module": "^2.0.0",
            "y18n": "^3.2.1",
            "yargs-parser": "^9.0.2"
          },
          "dependencies": {
            "y18n": {
              "version": "3.2.1",
              "bundled": true
            }
          }
        },
        "yargs-parser": {
          "version": "9.0.2",
          "bundled": true,
          "requires": {
            "camelcase": "^4.1.0"
          }
        }
      }
    },
    "oauth-sign": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.5.0.tgz",
      "integrity": "sha1-12f1FpMlYg6rLgh+8MRy53PbZGE="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz",
      "integrity": "sha1-ko9dD0cNSTQmUepnlLCFfBAGk/c="
    },
    "parse-link-header": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parse-link-header/-/parse-link-header-1.0.1.tgz",
      "integrity": "sha1-vt/g0hGK64S+deewJUGeyKYRQKc=",
      "requires": {
        "xtend": "~4.0.1"
      }
    },
    "parseurl": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz",
      "integrity": "sha1-/CidTtiZMRlGDBViUyYs3I3mW/M="
    },
    "path-parse": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.5.tgz",
      "integrity": "sha1-PBrfhx6pzWyUMbbqK9dKD/BVxME="
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "promise": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/promise/-/promise-7.3.1.tgz",
      "integrity": "sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==",
      "requires": {
        "asap": "~2.0.3"
      }
    },
    "proxy-addr": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.4.tgz",
      "integrity": "sha512-5erio2h9jp5CHGwcybmxmVqHmnCBZeewlfJ0pex+UW7Qny7OOZXTtH56TGNyBizkgiOwhJtMKrVzDTeKcySZwA==",
      "requires": {
        "forwarded": "~0.1.2",
        "ipaddr.js": "1.8.0"
      }
    },
    "psl": {
      "version": "1.1.27",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.1.27.tgz",
      "integrity": "sha512-J8tJX5tAeEp9tQTI2w2aMZ6V1INuU4JmNaNPRuHAqjjVq3ZJ+jV3+tcT3ncgTnBxvwJy740IB/WZrxFus2VdMA=="
    },
    "pug": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pug/-/pug-2.0.3.tgz",
      "integrity": "sha1-ccuoJTfJWl6rftBGluQiH1Oqh44=",
      "requires": {
        "pug-code-gen": "^2.0.1",
        "pug-filters": "^3.1.0",
        "pug-lexer": "^4.0.0",
        "pug-linker": "^3.0.5",
        "pug-load": "^2.0.11",
        "pug-parser": "^5.0.0",
        "pug-runtime": "^2.0.4",
        "pug-strip-comments": "^1.0.3"
      }
    },
    "pug-attrs": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pug-attrs/-/pug-attrs-2.0.3.tgz",
      "integrity": "sha1-owlflw5kFR972tlX7vVftdeQXRU=",
      "requires": {
        "constantinople": "^3.0.1",
        "js-stringify": "^1.0.1",
        "pug-runtime": "^2.0.4"
      }
    },
    "pug-code-gen": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pug-code-gen/-/pug-code-gen-2.0.1.tgz",
      "integrity": "sha1-CVHsgyJddNjPxHan+Zolm199BQw=",
      "requires": {
        "constantinople": "^3.0.1",
        "doctypes": "^1.1.0",
        "js-stringify": "^1.0.1",
        "pug-attrs": "^2.0.3",
        "pug-error": "^1.3.2",
        "pug-runtime": "^2.0.4",
        "void-elements": "^2.0.1",
        "with": "^5.0.0"
      }
    },
    "pug-error": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/pug-error/-/pug-error-1.3.2.tgz",
      "integrity": "sha1-U659nSm7A89WRJOgJhCfVMR/XyY="
    },
    "pug-filters": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pug-filters/-/pug-filters-3.1.0.tgz",
      "integrity": "sha1-JxZVVbwEwjbkqisDZiRt+gIbYm4=",
      "requires": {
        "clean-css": "^4.1.11",
        "constantinople": "^3.0.1",
        "jstransformer": "1.0.0",
        "pug-error": "^1.3.2",
        "pug-walk": "^1.1.7",
        "resolve": "^1.1.6",
        "uglify-js": "^2.6.1"
      }
    },
    "pug-lexer": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pug-lexer/-/pug-lexer-4.0.0.tgz",
      "integrity": "sha1-IQwYRX7y4XYCQnQMXmR715TOwng=",
      "requires": {
        "character-parser": "^2.1.1",
        "is-expression": "^3.0.0",
        "pug-error": "^1.3.2"
      }
    },
    "pug-linker": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/pug-linker/-/pug-linker-3.0.5.tgz",
      "integrity": "sha1-npp65ABWgtAn3uuWsAD4juuDoC8=",
      "requires": {
        "pug-error": "^1.3.2",
        "pug-walk": "^1.1.7"
      }
    },
    "pug-load": {
      "version": "2.0.11",
      "resolved": "https://registry.npmjs.org/pug-load/-/pug-load-2.0.11.tgz",
      "integrity": "sha1-5kjlftET/iwfRdV4WOorrWvAFSc=",
      "requires": {
        "object-assign": "^4.1.0",
        "pug-walk": "^1.1.7"
      }
    },
    "pug-parser": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/pug-parser/-/pug-parser-5.0.0.tgz",
      "integrity": "sha1-45Stmz/KkxI5QK/4hcBuRKt+aOQ=",
      "requires": {
        "pug-error": "^1.3.2",
        "token-stream": "0.0.1"
      }
    },
    "pug-runtime": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pug-runtime/-/pug-runtime-2.0.4.tgz",
      "integrity": "sha1-4XjhvaaKsujArPybztLFT9iM61g="
    },
    "pug-strip-comments": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/pug-strip-comments/-/pug-strip-comments-1.0.3.tgz",
      "integrity": "sha1-8VWVkiBu3G+FMQ2s9K+0igJa9Z8=",
      "requires": {
        "pug-error": "^1.3.2"
      }
    },
    "pug-walk": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/pug-walk/-/pug-walk-1.1.7.tgz",
      "integrity": "sha1-wA1cUSi6xYBr7BXSt+fNq+QlMfM="
    },
    "punycode": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
      "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4="
    },
    "qs": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-2.3.3.tgz",
      "integrity": "sha1-6eha2+ddoLvkyOBHaghikPhjtAQ="
    },
    "query-json": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/query-json/-/query-json-2.0.1.tgz",
      "integrity": "sha1-+zcSIC+bJFBoOH+Exk7vzI2xgYg="
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha1-T2ih3Arli9P7lYSMMDJNt11kNgs="
    },
    "range-parser": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz",
      "integrity": "sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4="
    },
    "raw-body": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
      "requires": {
        "bytes": "3.0.0",
        "http-errors": "1.6.3",
        "iconv-lite": "0.4.23",
        "unpipe": "1.0.0"
      }
    },
    "readable-stream": {
      "version": "1.0.34",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
      "integrity": "sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=",
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "redis": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/redis/-/redis-2.8.0.tgz",
      "integrity": "sha512-M1OkonEQwtRmZv4tEWF2VgpG0JWJ8Fv1PhlgT5+B+uNq2cA3Rt1Yt/ryoR+vQNOQcIEgdCdfH0jr3bDpihAw1A==",
      "requires": {
        "double-ended-queue": "^2.1.0-0",
        "redis-commands": "^1.2.0",
        "redis-parser": "^2.6.0"
      }
    },
    "redis-commands": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/redis-commands/-/redis-commands-1.3.5.tgz",
      "integrity": "sha512-foGF8u6MXGFF++1TZVC6icGXuMYPftKXt1FBT2vrfU9ZATNtZJ8duRC5d1lEfE8hyVe3jhelHGB91oB7I6qLsA=="
    },
    "redis-parser": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-2.6.0.tgz",
      "integrity": "sha1-Uu0J2srBCPGmMcB+m2mUHnoZUEs="
    },
    "regenerator-runtime": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz",
      "integrity": "sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg=="
    },
    "repeat-string": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
      "integrity": "sha1-jcrkcOHIirwtYA//Sndihtp15jc="
    },
    "request": {
      "version": "2.87.0",
      "resolved": "https://registry.npmjs.org/request/-/request-2.87.0.tgz",
      "integrity": "sha512-fcogkm7Az5bsS6Sl0sibkbhcKsnyon/jV1kF3ajGmF0c8HrttdKTPRT9hieOaQHA5HEq6r8OyWOo/o781C1tNw==",
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.6.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.5",
        "extend": "~3.0.1",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.1",
        "har-validator": "~5.0.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.17",
        "oauth-sign": "~0.8.2",
        "performance-now": "^2.1.0",
        "qs": "~6.5.1",
        "safe-buffer": "^5.1.1",
        "tough-cookie": "~2.3.3",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.1.0"
      },
      "dependencies": {
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        },
        "aws-sign2": {
          "version": "0.7.0",
          "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
          "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="
        },
        "caseless": {
          "version": "0.12.0",
          "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
          "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="
        },
        "combined-stream": {
          "version": "1.0.6",
          "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz",
          "integrity": "sha1-cj599ugBrFYTETp+RFqbactjKBg=",
          "requires": {
            "delayed-stream": "~1.0.0"
          }
        },
        "delayed-stream": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
          "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
        },
        "forever-agent": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
          "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
        },
        "form-data": {
          "version": "2.3.2",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz",
          "integrity": "sha1-SXBJi+YEwgwAXU9cI67NIda0kJk=",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "1.0.6",
            "mime-types": "^2.1.12"
          }
        },
        "http-signature": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
          "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
          "requires": {
            "assert-plus": "^1.0.0",
            "jsprim": "^1.2.2",
            "sshpk": "^1.7.0"
          }
        },
        "oauth-sign": {
          "version": "0.8.2",
          "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz",
          "integrity": "sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="
        },
        "qs": {
          "version": "6.5.2",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA=="
        },
        "tough-cookie": {
          "version": "2.3.4",
          "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz",
          "integrity": "sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA==",
          "requires": {
            "punycode": "^1.4.1"
          }
        },
        "tunnel-agent": {
          "version": "0.6.0",
          "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
          "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
          "requires": {
            "safe-buffer": "^5.0.1"
          }
        }
      }
    },
    "request-promise": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/request-promise/-/request-promise-4.2.2.tgz",
      "integrity": "sha1-0epG1lSm7k+O5qT+oQGMIpEZBLQ=",
      "requires": {
        "bluebird": "^3.5.0",
        "request-promise-core": "1.1.1",
        "stealthy-require": "^1.1.0",
        "tough-cookie": ">=2.3.3"
      }
    },
    "request-promise-core": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/request-promise-core/-/request-promise-core-1.1.1.tgz",
      "integrity": "sha1-Pu4AssWqgyOc+wTFcA2jb4HNCLY=",
      "requires": {
        "lodash": "^4.13.1"
      }
    },
    "require_optional": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/require_optional/-/require_optional-1.0.1.tgz",
      "integrity": "sha512-qhM/y57enGWHAe3v/NcwML6a3/vfESLe/sGM2dII+gEO0BpKRUkWZow/tyloNqJyN6kXSl3RyyM8Ll5D/sJP8g==",
      "requires": {
        "resolve-from": "^2.0.0",
        "semver": "^5.1.0"
      }
    },
    "resolve": {
      "version": "1.7.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.7.1.tgz",
      "integrity": "sha512-c7rwLofp8g1U+h1KNyHL/jicrKg1Ek4q+Lr33AL65uZTinUZHe30D5HlyN5V9NW0JX1D5dXQ4jqW5l7Sy/kGfw==",
      "requires": {
        "path-parse": "^1.0.5"
      }
    },
    "resolve-from": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-2.0.0.tgz",
      "integrity": "sha1-lICrIOlP+h2egKgEx+oUdhGWa1c="
    },
    "right-align": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/right-align/-/right-align-0.1.3.tgz",
      "integrity": "sha1-YTObci/mo1FWiSENJOFMlhSGE+8=",
      "requires": {
        "align-text": "^0.1.1"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.2.tgz",
      "integrity": "sha512-4cDsYuAjXssUSjxHKRe4DTZC0agDwsCqcMqtJAQPzC74nJ7LfAJflAtC1Zed5hMzEQKj82d3tuzqdGNRsLJ4Gw==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="
    },
    "semver": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.6.0.tgz",
      "integrity": "sha512-RS9R6R35NYgQn++fkDWaOmqGoj4Ek9gGs+DPxNUZKuwE183xjJroKvyo1IzVFeXvUrvmALy6FWD5xrdJT25gMg=="
    },
    "send": {
      "version": "0.16.2",
      "resolved": "https://registry.npmjs.org/send/-/send-0.16.2.tgz",
      "integrity": "sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==",
      "requires": {
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "destroy": "~1.0.4",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "~1.6.2",
        "mime": "1.4.1",
        "ms": "2.0.0",
        "on-finished": "~2.3.0",
        "range-parser": "~1.2.0",
        "statuses": "~1.4.0"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "requires": {
            "ms": "2.0.0"
          }
        },
        "mime": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/mime/-/mime-1.4.1.tgz",
          "integrity": "sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ=="
        },
        "statuses": {
          "version": "1.4.0",
          "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz",
          "integrity": "sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew=="
        }
      }
    },
    "serve-favicon": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/serve-favicon/-/serve-favicon-2.5.0.tgz",
      "integrity": "sha1-k10kDN/g9YBTB/3+ln2IlCosvPA=",
      "requires": {
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "ms": "2.1.1",
        "parseurl": "~1.3.2",
        "safe-buffer": "5.1.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
        },
        "safe-buffer": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
          "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="
        }
      }
    },
    "serve-static": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz",
      "integrity": "sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.2",
        "send": "0.16.2"
      }
    },
    "setprototypeof": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
      "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
    },
    "simple-oauth2": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/simple-oauth2/-/simple-oauth2-2.0.1.tgz",
      "integrity": "sha512-cfFEkAAoFWpxXlOMkw5oSwC49eC406R7f8C012IJYAcZK/BjgwUmrS2WF8jOZ+6RMasn4SLfYgBQJt8ckStizA==",
      "requires": {
        "date-fns": "^1.3.0",
        "debug": "^3.1.0",
        "joi": "^13.0.2",
        "wreck": "^14.0.2"
      },
      "dependencies": {
        "debug": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
          "requires": {
            "ms": "2.0.0"
          }
        }
      }
    },
    "sntp": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz",
      "integrity": "sha1-+4hfGLDzqtGJ+CSGJTa87ux1CQA=",
      "requires": {
        "hoek": "0.9.x"
      }
    },
    "source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha1-/0rm5oZWBWuks+eSqzM004JzyhE=",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sshpk": {
      "version": "1.14.2",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.14.2.tgz",
      "integrity": "sha1-xvxhZIo9nE52T9P8306hBeSSupg=",
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "dependencies": {
        "asn1": {
          "version": "0.2.3",
          "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz",
          "integrity": "sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="
        },
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        }
      }
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
    },
    "stealthy-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/stealthy-require/-/stealthy-require-1.1.1.tgz",
      "integrity": "sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks="
    },
    "string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
    },
    "stringstream": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.6.tgz",
      "integrity": "sha512-87GEBAkegbBcweToUrdzf3eLhWNg06FJTebl4BVJz/JgWy8CvEr9dRtX5qWphiynMSQlxxi+QqN0z5T32SLlhA=="
    },
    "tiny-json-http": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/tiny-json-http/-/tiny-json-http-7.0.0.tgz",
      "integrity": "sha512-g3S2RiSmoZDJOMDTX6uj8GjVsiH4s0W0tb1YKYARoP4cosgIb4CB2i7Cdzn9UJqOrI1b1aNK+cgScPx4TwolQg=="
    },
    "to-fast-properties": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-1.0.3.tgz",
      "integrity": "sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="
    },
    "token-stream": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/token-stream/-/token-stream-0.0.1.tgz",
      "integrity": "sha1-zu78cXp2xDFvEm0LnbqlXX598Bo="
    },
    "topo": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/topo/-/topo-3.0.0.tgz",
      "integrity": "sha512-Tlu1fGlR90iCdIPURqPiufqAlCZYzLjHYVVbcFWDMcX7+tK8hdZWAfsMrD/pBul9jqHHwFjNdf1WaxA9vTRRhw==",
      "requires": {
        "hoek": "5.x.x"
      },
      "dependencies": {
        "hoek": {
          "version": "5.0.3",
          "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.3.tgz",
          "integrity": "sha512-Bmr56pxML1c9kU+NS51SMFkiVQAb+9uFfXwyqR2tn4w2FPvmPt65eZ9aCcEfRXd9G74HkZnILC6p967pED4aiw=="
        }
      }
    },
    "tough-cookie": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.4.2.tgz",
      "integrity": "sha512-vahm+X8lSV/KjXziec8x5Vp0OTC9mq8EVCOApIsRAooeuMPSO8aT7PFACYkaL0yZ/3hVqw+8DzhCJwl8H2Ad6w==",
      "requires": {
        "psl": "^1.1.24",
        "punycode": "^1.4.1"
      }
    },
    "tunnel-agent": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.3.tgz",
      "integrity": "sha1-Y3PbdpCf5XDgjXNYM2Xtgop07us="
    },
    "tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
      "optional": true
    },
    "type-is": {
      "version": "1.6.16",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.16.tgz",
      "integrity": "sha512-HRkVv/5qY2G6I8iab9cI7v1bOIdhm94dVjQCPFElW9W+3GeDOSHmy2EBYe4VTApuzolPcmgFTN3ftVJRKR2J9Q==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.18"
      }
    },
    "uglify-js": {
      "version": "2.8.29",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.29.tgz",
      "integrity": "sha1-KcVzMUgFe7Th913zW3qcty5qWd0=",
      "requires": {
        "source-map": "~0.5.1",
        "uglify-to-browserify": "~1.0.0",
        "yargs": "~3.10.0"
      }
    },
    "uglify-to-browserify": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.2.tgz",
      "integrity": "sha1-bgkk1r2mta/jSeOabWMoUKD4grc=",
      "optional": true
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "underscore": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.9.1.tgz",
      "integrity": "sha512-5/4etnCkd9c8gwgowi5/om/mYO5ajCaOgdzj/oW+0eQV9WxKBDZw5+ycmKmeaTXjInS/W0BzpGLo2xR2aBwZdg=="
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
    },
    "uuid": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
      "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      },
      "dependencies": {
        "assert-plus": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
          "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
        }
      }
    },
    "void-elements": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/void-elements/-/void-elements-2.0.1.tgz",
      "integrity": "sha1-wGavtYK7HLQSjWDqkjkulNXp2+w="
    },
    "window-size": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/window-size/-/window-size-0.1.0.tgz",
      "integrity": "sha1-VDjNLqk7IC76Ohn+iIeu58lPnJ0="
    },
    "with": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/with/-/with-5.1.1.tgz",
      "integrity": "sha1-+k2qktrzLE6pTtRTyB8EaGtXXf4=",
      "requires": {
        "acorn": "^3.1.0",
        "acorn-globals": "^3.0.0"
      }
    },
    "wordwrap": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz",
      "integrity": "sha1-t5Zpu0LstAn4PVg8rVLKF+qhZD8="
    },
    "wreck": {
      "version": "14.0.2",
      "resolved": "https://registry.npmjs.org/wreck/-/wreck-14.0.2.tgz",
      "integrity": "sha512-QCm3omWNJUseqrSzwX2QZi1rBbmCfbFHJAXputLLyZ37VSiFnSYQB0ms/mPnSvrlIu7GVm89Y/gBNhSY26uVIQ==",
      "requires": {
        "boom": "7.x.x",
        "hoek": "5.x.x"
      },
      "dependencies": {
        "boom": {
          "version": "7.2.0",
          "resolved": "https://registry.npmjs.org/boom/-/boom-7.2.0.tgz",
          "integrity": "sha1-K/8kpVVldn/ehp7ICDF+sQxI6WY=",
          "requires": {
            "hoek": "5.x.x"
          }
        },
        "hoek": {
          "version": "5.0.3",
          "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.3.tgz",
          "integrity": "sha512-Bmr56pxML1c9kU+NS51SMFkiVQAb+9uFfXwyqR2tn4w2FPvmPt65eZ9aCcEfRXd9G74HkZnILC6p967pED4aiw=="
        }
      }
    },
    "xml2js": {
      "version": "0.4.19",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.19.tgz",
      "integrity": "sha512-esZnJZJOiJR9wWKMyuvSE1y6Dq5LCuJanqhxslH2bxM6duahNZ+HMpCLhBQGZkbX6xRf8x1Y2eJlgt2q3qo49Q==",
      "requires": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~9.0.1"
      },
      "dependencies": {
        "xmlbuilder": {
          "version": "9.0.7",
          "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-9.0.7.tgz",
          "integrity": "sha1-Ey7mPS7FVlxVfiD0wi35rKaGsQ0="
        }
      }
    },
    "xmlbuilder": {
      "version": "2.4.6",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-2.4.6.tgz",
      "integrity": "sha1-QsZk8TWIZOW+sUYbQ0auyHtjRQ8=",
      "requires": {
        "lodash-node": "~2.4.1"
      }
    },
    "xtend": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz",
      "integrity": "sha1-pcbVMr5lbiPbgg77lDofBJmNY68="
    },
    "yargs": {
      "version": "3.10.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-3.10.0.tgz",
      "integrity": "sha1-9+572FfdfB0tOMDnTvvWgdFDH9E=",
      "requires": {
        "camelcase": "^1.0.2",
        "cliui": "^2.1.0",
        "decamelize": "^1.0.0",
        "window-size": "0.1.0"
      }
    }
  }
}

======================
D:\devhub-production\heroku\uva-onexys\package.json
{
  "name": "onexys-app",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "test": "NODE_ENV=development nodemon start.js"
  },
  "dependencies": {
    "async": "^2.6.0",
    "better-queue": "^3.8.6",
    "bird": "^0.7.0",
    "body-parser": "~1.18.3",
    "browser-detect": "^0.2.28",
    "canvas-api": "^3.5.0",
    "client-sessions": "^0.8.0",
    "connect-redis": "^3.3.3",
    "cookie-parser": "~1.4.3",
    "cookie-session": "^2.0.0-beta.3",
    "debug": "~4.1.1",
    "dotenv": "^6.2.0",
    "express": "~4.16.4",
    "express-session": "^1.15.6",
    "ims-lti": "^3.0.2",
    "mime-types": "^2.1.17",
    "mongodb": "^3.1.13",
    "morgan": "~1.9.1",
    "npm": "^6.9.0",
    "pug": "~2.0.0-beta11",
    "query-json": "^2.0.1",
    "redis": "^2.8.0",
    "request": "^2.83.0",
    "request-promise": "^4.2.2",
    "serve-favicon": "~2.5.0",
    "simple-oauth2": "^2.0.1",
    "underscore": "^1.8.3"
  },
  "description": "Second version of ONEXYS app, with new API and admin interface",
  "main": "app.js",
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mrdutta27/ONEXYSapp.git"
  },
  "keywords": [
    "ONEXYS",
    "Yale"
  ],
  "author": "Surya Dutta",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mrdutta27/ONEXYSapp/issues"
  },
  "homepage": "https://github.com/mrdutta27/ONEXYSapp#readme"
}

======================
D:\devhub-production\heroku\uva-onexys\Procfile
web: node start.js

======================
D:\devhub-production\heroku\uva-onexys\public\additionalWebPages\introPhysicsAtYale17.html
<html>
<head>
	<meta charset="UTF-8">
	<link href="onexys_dev_style.css" rel="stylesheet">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
</head>
<body>
<div class="user_content">
<div class="onexys_styling lifeoverride">

    <!--
	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=775de80d-f8f9-4ef9-a865-01812dda8bf2&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;">Former students describe their <em>approach to Physics.</em>.</span></p>


            <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=9acaf5dd-e2f0-49e1-819a-267104398a95&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;">Students give their <em>favorite parts of Physics 170</em>!</span></p>


            <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=039fe5bc-65ce-43eb-ad8d-afeafd95f37d&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;"><strong>Professor Simon Mochrie</strong> answer the question <em>What is Physics 170</em>?</span></p>

    -->

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header welcomefirst" id="vid9"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=775de80d-f8f9-4ef9-a865-01812dda8bf2&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">Good approaches to Physics.<br><br><span class="lifeatdescription">Former students describe their approach to Physics.</div>
	</div>


	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid8"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=9acaf5dd-e2f0-49e1-819a-267104398a95&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">Favorite parts of Physics 170<br><br><span class="lifeatdescription">Students describe their favorite parts of Physics 170.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid7"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=039fe5bc-65ce-43eb-ad8d-afeafd95f37d&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">What <em>is</em> Physics 170?<br><br><span class="lifeatdescription">Professor Simon Mochrie describes what's in the course and what to expect.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid6"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=5116104a-91f3-40ea-b4ed-bce5ebc8c276&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">Physics 170 Wisdom<br><br><span class="lifeatdescription">Professor Simon Mochrie describes Physics 170 and gives some wisdom.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid5"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7abb9590-4631-4cde-9e6f-775c29e0b549&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">Why did you take Physics 170?<br><br><span class="lifeatdescription">Former Physics students answer the question "Why did you take Physics 170?"</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid4"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1e08902e-4a2c-4934-85c2-7daee700ae8f&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">How do you feel coming into Physics (part 2)?<br><br><span class="lifeatdescription">Former Physics students answer the question "How did you feel going into Physics?"</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid3"></div>
	    <div class="coach_photo lifeatvid left">
	    	<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=bdd8cffe-38d8-43b7-a5cc-6bd268275432&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		    
		</div>
		<div class="coach_name lifeatcaption left">The Physics 170 Backstory<br><br><span class="lifeatdescription">Professor Simon Mochrie talks about what led to the creation of Physics 170.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid2"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=406fef76-57c2-420f-8415-0dd6f31f49a0&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">Tips for incoming Physics 170/180 students<br><br><span class="lifeatdescription">Former students share wisdom on how to conquer the unconquerable.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
		<div class="coach_header" id="vid1"></div>
		<div class="coach_photo lifeatvid left">
			<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=14949707-dffc-4ed6-8de6-23e64dbc419a&autoplay=true">
                	<img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                	<img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
		</div>
		<div class="coach_name lifeatcaption left">How do you feel coming into Physics?<br><br><span class="lifeatdescription">Former students answer this question in surprising ways.</div>
	</div>
    
 


	

<div class="welcometitle coach_title lifeattitleshad"></div>
<div class="coaches_index lifeatindex">
	<a href="#vid9">Good approaches to Physics</a><br />
	<a href="#vid8">Favorite parts of Physics 170</a><br />
	<a href="#vid7">What <em>is</em> Physics 170?</a><br />
	<a href="#vid6">Physics 170 Wisdom</a><br />
	<a href="#vid5">Why did you take Physics?</a><br />
	<a href="#vid4">How do you feel coming into Physics (part 2)?</a><br />
	<a href="#vid3">The Physics 170 Backstory</a><br />
	<a href="#vid2">Tips for Incoming Students</a><br />
	<a href="#vid1">How do you feel coming into Physics?</a></div>
<div class="coach_title welcometitle lifeattitle">
		<p>Intro Physics</p>
		<h1>&#64;Yale</h1>
	</div>


</div>
</div>
</body>
</html>

======================
D:\devhub-production\heroku\uva-onexys\public\additionalWebPages\lifeAtYale17.html
<html>
<head>
	<meta charset="UTF-8">
	<link href="onexys_dev_style.css" rel="stylesheet">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
</head>
<body>
<div class="user_content">
<div class="onexys_styling lifeoverride">

    <!--
            <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=141d1313-a5ad-462b-bb61-cd0ae18a2969&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;"><strong>Zach Kreiser and Julie Luo</strong> give great tips on <em>time management</em>.</p>


            <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7d01d4b8-327b-4332-856a-170bc61bfd1e&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;"><strong>Jonathan Roig and Melina Delgado</strong> take us on a sneak peak of <em>Benjamin Franklin ad Pauli Murray Colleges</em>.</p>


            <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=db137a28-4210-470d-b69a-2ae4a08842f1&autoplay=true">
                <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
            </div>
            <p><span style="font-size: 12pt;"><strong>Kees Schipper</strong> gives great advice for <em>getting through midterms and finals</em>.</p>



    -->

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header welcomefirst" id="vid29"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=141d1313-a5ad-462b-bb61-cd0ae18a2969&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Time Management<br><br><span class="lifeatdescription">Zach Kreiser and Julie Luo give great tips on time management.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid28"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7d01d4b8-327b-4332-856a-170bc61bfd1e&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Benjamin Franklin and Pauli Murray Colleges<br><br><span class="lifeatdescription">Jonathan Roig and Melina Delgado take us on a sneak peak of Benjamin Franklin ad Pauli Murray Colleges.</div>
	</div>
	
		<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid27"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=db137a28-4210-470d-b69a-2ae4a08842f1&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Surviving Mid-terms and Finals<br><br><span class="lifeatdescription">Kees Schipper gives great advice for getting through midterms and finals.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid26"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=5ab21769-c5c1-4ba9-8e9e-94f12d7cb748&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">What I wish I would have known...<br><br><span class="lifeatdescription">Shruti Baxti talks about "What I wish I would have known...".</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid25"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=f7d4c8a3-0aa4-4208-b8c2-354edb92aa6b&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Math resources<br><br><span class="lifeatdescription">Professor John Hall talks about math resources available to students.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid24"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=513b05eb-76f7-492c-acd6-b8f6db3f700c&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Trying new things<br><br><span class="lifeatdescription">Olivia Tracey remembers trying new things on campus when she first arrived last fall.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid23"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1fcf7ad9-4504-4241-8bc9-caa6d36cef2c&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Cultural centers<br><br><span class="lifeatdescription">Tran Dang talks about cultural centers at Yale</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid22"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3b57386b-f918-4f97-8c49-108d44ed1d57&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Choosing courses in your first year<br><br><span class="lifeatdescription">Tra Nguyen gives great advice for choosing courses in your first year.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid21"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3ef78b8c-bf92-4623-a3eb-e508f9bb6019&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Escaping the Yale bubble<br><br><span class="lifeatdescription">Victoria Palmer and Serena Ly interview each other about escaping the Yale Bubble.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid20"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=0a40b9f0-2882-46d2-80fc-5b2c09aac741&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Advice to my college self<br><br><span class="lifeatdescription">Dr. Karin Gosselink looks back and gives advice to herself she wishes she would have been given.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid19"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=b2b02267-86e3-4d6b-bda2-27d1c42f42b0&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Healthy Lifestyles<br><br><span class="lifeatdescription">Djan Kweku (with an assist from Sophie Menard) talks about having a healthy lifestyle.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid18"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7653315a-684b-40a9-9f43-17963f75e83c&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Extra-curricular activities<br><br><span class="lifeatdescription">Kevin Koste and Kayleigh Bishop talk about fun things to do outside of class.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid17"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=d132c983-663e-484c-8af1-b0ee4fd40d74&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Musical life at Yale<br><br><span class="lifeatdescription">Ece Bozkurt and Matthew Le take us on a journey of musical life at Yale.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid16"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1b8737cd-9e21-46eb-b19d-3be8781ea538&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Math advice<br><br><span class="lifeatdescription">Professor John Hall gives some math-specific advice to incoming students.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid15"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=62ba30a0-3494-46dd-b223-0e02c818e688&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Choosing a Major<br><br><span class="lifeatdescription">Lily Mirfakhraie (with an assist from Hannah Nikole Almonte) talks about choosing a major.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid14"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=6ccc5b3f-8b83-4bb2-96c6-7ac9a29d382e&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">(Pre) Orientation 1<br><br><span class="lifeatdescription">Jessica Asiedu (with an assist from Ademide Ajayi) talks about pre-orientation.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid13"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=6488ad63-6978-4a82-a0ee-4ccc97a38b6a&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Coffee Shop Tour<br><br><span class="lifeatdescription">Graciela Garcia and Allie Forman take us on a local coffee shop tour.</div>
	</div>

	<div class="coach_packet lifeatpacket">
	    <div class="coach_header " id="vid12"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=562dc0fb-5d0e-485c-bf2c-635996c482ff&autoplay=true">
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
                </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Academic Strategies<br><br><span class="lifeatdescription">Dr. Karin Gosselink talks about academic strategies.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid11"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=67afea7e-6309-4939-bf95-638b14964b87&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
			    </a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Sports and Intramurals<br><br><span class="lifeatdescription">Alex Galland talks about sports and intramurals at Yale.</div>
	</div>

	
	<div class="coach_packet lifeatpacket">
	    <div class="coach_header" id="vid10"></div>
	    <div class="coach_photo lifeatvid left">
		    <div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=04510724-91dd-47a7-a05e-1641788ac1cb&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Research Experiences<br><br><span class="lifeatdescription">Jed Thompson talks about the many, many opportunities for research as an undergraduate here at Yale.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid9">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=b8901120-971f-44c8-9d93-debe6229ab55&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">STARS<br><br><span class="lifeatdescription">STARS =  Science Technology and Research Scholars.  Rega Sota gives you the low-down on this great summer research experience here at Yale.</div>
	</div>
    
    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid8">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=a625fa40-d0a3-46e4-a3f3-b3bcdbb78576&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div></div>
			<div class="coach_name lifeatcaption left">Move-in Day<br><br><span class="lifeatdescription">Kenneth Jackson talks about this all-important day.</div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid7">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=16cec906-f7f1-4606-b852-0b0f2f9a6a03&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Tutoring Website<br><br><span class="lifeatdescription">James Kim from the Office of Admissions talks about this great resource.</div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid6">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=ae72682c-2989-4599-9c7a-ed44ee033102&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Writing Tutors<br><br><span class="lifeatdescription">You may not be Tolstoy, nor Faulkner and maybe not Hemmingway.  In case you aren't, Ally and Seewan (former coaches) talk about their experiences with writing tutors.</div>
	</div>
	
	<div class="coach_packet lifeatpacket">
		<div class="coach_header" id="vid5"></div>
		<div class="coach_photo lifeatvid left">
			<div class="onexys_video">
            	<a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=9db67b6a-a796-4301-beb7-45ebc37f4684&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Office Hours<br><br><span class="lifeatdescription">Do you have a few questions and don't have time to ask your professor after class? Isaiah (former coach) talks about how office hours typically work here at Yale.</div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid4">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=37708e77-ed28-47ad-8f0e-481511c005ce&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">(Pre) Orientation 2<br><br><span class="lifeatdescription">Peter, Onexys Coach '16, talks about what to expect before and during Orientation.</div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid3">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=93f6786c-15cc-4240-9da8-80bb0e38dffd&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Study Abroad<br><br><span class="lifeatdescription">Many Yalies suffer from FOMO syndrome.  Haven't heard of it? The common name for this disease is "Fear of Missing Out."  Many Yalies suffer from FOMO and never study abroad. Ben, Onexys Coach '16, talks about the great opportunities and support here at Yale to study abroad.</div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid2">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=437ee901-7d87-4fa0-a3fb-7bc06e5785af&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
		<div class="coach_name lifeatcaption left">Science Hill<br><br><span class="lifeatdescription">Alica, Onexys Coach '15-'16, talks about the center of science universe at Yale: Science Hill. </div>
	</div>
	
	    <div class="coach_packet lifeatpacket">
	<div class="coach_header" id="vid1">
	</div>
	<div class="coach_photo lifeatvid left">
		<div class="onexys_video">
                <a class="colorbox" href="https://yale.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=bef5900d-66b7-455f-8edf-e58fcbd4abaa&autoplay=true"> 
                    <img class="onexys_thumbnail" src="https://onexys.herokuapp.com/images/lifeAtYale/lifeAtYaleC.png" alt="" />
                    <img class="onexys_playbutton" src="https://onexys.herokuapp.com/images/icons/playbutton.png" alt="" />
				</a>
			</div>
		</div>
			<div class="coach_name lifeatcaption left">Libraries and Dining Options.<br><br><span class="lifeatdescription">Don't understand the connection between Libraries and Dining Options? Neither do we.  But Seewan, Onexys Coach '16 gets it. Check out her thoughts on these two subjects.</div>
	</div>
	

<div class="welcometitle coach_title lifeattitleshad"></div>
<div class="coaches_index lifeatindex">
    <a href="#vid29">Time management</a><br />
    <a href="#vid28">The new residential colleges</a><br />
    <a href="#vid27">Surviving mid-terms and finals</a><br />
    <a href="#vid26">What I wish I would have known...</a><br />
    <a href="#vid25">Math Resources</a><br />
    <a href="#vid24">Trying new things</a><br />
    <a href="#vid23">Cultural centers</a><br />
    <a href="#vid22">Choosing courses in year 1 </a><br />
    <a href="#vid21">Escaping the Yale bubble</a><br />
    <a href="#vid20">Advice to my college self</a><br />
    <a href="#vid19">Healthy lifestyles</a><br />
    <a href="#vid18">Extra-curricular activities</a><br />
    <a href="#vid17">Musical life at Yale</a><br />
    <a href="#vid16">Math advice</a><br />
    <a href="#vid15">Choosing a major</a><br />
    <a href="#vid14">Pre-orientation 1</a><br />
    <a href="#vid13">Coffee shop tour</a><br />
    <a href="#vid12">Academic strategies</a><br />
	<a href="#vid11">Sports and intramurals</a><br />
	<a href="#vid10">Research experiences</a><br />
	<a href="#vid9">STARS</a><br />
	<a href="#vid8">Move-in day</a><br />
	<a href="#vid7">Tutoring website</a><br />
	<a href="#vid6">Writing tutors</a> <br />
	<a href="#vid5">Office hours</a><br />
    <a href="#vid4">Pre-orientation 2</a>
	<a href="#vid3">Study abroad</a><br />
	<a href="#vid2">Science Hill</a><br />
	<a href="#vid1">Libraries and dining options</a></div>
<div class="coach_title welcometitle lifeattitle">
		<p>Now Presenting...</p>
		<h1>Life&#64;Yale</h1>
	</div>


</div>
</div>
</body>
</html>

======================
D:\devhub-production\heroku\uva-onexys\public\additionalWebPages\PostTest.html
<html>
<head>
	<meta charset="UTF-8">
	<link href="onexys_dev_style.css" rel="stylesheet">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
</head>
<body>
<div class="onexys_styling">
		<div class="title_mod standard_box module_box left post_test_page">
		<p>And now it's time for...</p>
		<h1>The Post - Test</h1>
	</div>
	<div class="quicklinks standard_title_box left post_test_page">
		<p>The Post Test is a great way to see how much you have improved over the course of ONEXYS. Note this is not the same as a knowledge check that some of you have seen as you reach the end of ALEKS. In fact, to take the post test, you need to go to a brand-new ALEKS course that we've set up just for this purpose.<br><br></p>
		<p class="post_test_list">Here's what you need to do:<br><br></p>


<p class="post_test_list post_test_first"><img src="https://onexys.herokuapp.com/images/postTest/one_post.svg" alt="one">Follow the link to the<a href="https://yale.instructure.com/courses/10623/modules/items/45653">Post-Test in ALEKS</a>. This will take you to "ONEXYS 2017 Summer - Post-Test."</p>

<p class="post_test_list"><img src="https://onexys.herokuapp.com/images/postTest/two_post.svg"  alt="two">You will be asked to take an Initial Knowledge Check. <em>This is the post-test.</em></p>

<p class="post_test_list"><img src="https://onexys.herokuapp.com/images/postTest/three_post.svg" alt="three">Take the post-test! <em>Please complete this by Friday, August 11th, at 11:59 pm EST.</em></p>

<p class="post_test_list"><img src="https://onexys.herokuapp.com/images/postTest/four_post.svg" alt="four">You will be asked to take an Initial Knowledge Check. <em>This is the post-test.</em></p>

<p class="post_test_list"><img src="https://onexys.me/2016images/checkmarks/five_post.svg">Take the post-test!  <em>Please complete this by Monday, August 15th, at 1159p.</em></p>


	</div>
</div>

</body>
</head>
</html>
======================
D:\devhub-production\heroku\uva-onexys\public\additionalWebPages\PreTestONEXYS.html
<html>
<head>
	<meta charset="UTF-8">
	<link href="onexys_dev_style.css" rel="stylesheet">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
</head>
<body>
<div class="onexys_styling">
		<div class="title_mod standard_box module_box left post_test_page">
		<p>And now it's time for...</p>
		<h1>The Post - Test</h1>
	</div>
	<div class="quicklinks standard_title_box left post_test_page">
		<p>The Post Test is a great way to see how much you have improved over the course of ONEXYS. Note this is not the same as a knowledge check that some of you have seen as you reach the end of ALEKS. In fact, to take the post test, you need to go to a brand-new ALEKS course that we've set up just for this purpose.<br><br></p>
		<p class="post_test_list">Here's what you need to do:<br><br></p>


<p class="post_test_list post_test_first"><img src="https://onexys.me/2016images/checkmarks/one_post.svg">Go to<a id="" class="" title="" href="https://www.aleks.com/" target="">Aleks.com</a></p>

<p class="post_test_list"><img src="https://onexys.me/2016images/checkmarks/two_post.svg">Enter your ALEKS username. If you've forgotten your Aleks username,<a id=""  title="ALEKS_Blue_Login.xlsx" href="/courses/686/files/190573/" target="" >it's in this spreadsheet</a>.If you've forgotten your password, click on "Forgot your login info?" and it will be sent to you.</p>

<p class="post_test_list"><img src="https://onexys.me/2016images/checkmarks/three_post.svg">Click on "New Class" (upper right corner) and use the class code <strong>XLLXQ-6HEEP.</strong> This will take you to ONEXYS SUMMER 2016 - POST TEST</p>

<p class="post_test_list"><img src="https://onexys.me/2016images/checkmarks/four_post.svg">You will be asked to take an Initial Knowledge Check. <em>This is the post-test.</em></p>

<p class="post_test_list"><img src="https://onexys.me/2016images/checkmarks/five_post.svg">Take the post-test!  <em>Please complete this by Monday, August 15th, at 1159p.</em></p>


	</div>
</div>

</body>
</head>
</html>
======================
D:\devhub-production\heroku\uva-onexys\public\additionalWebPages\welcome17.html
